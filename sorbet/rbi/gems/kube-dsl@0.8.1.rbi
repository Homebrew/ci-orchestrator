# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `kube-dsl` gem.
# Please instead update this file by running `bin/tapioca gem kube-dsl`.


class ClassMismatchError < StandardError; end

# source://kube-dsl//lib/kube-dsl.rb#2
# typed: strong
module KubeDSL
  extend ::KubeDSL::Entrypoint
end

# source://kube-dsl//lib/kube-dsl/allow_blank.rb#3
class KubeDSL::AllowBlank
  # @return [AllowBlank] a new instance of AllowBlank
  #
  # source://kube-dsl//lib/kube-dsl/allow_blank.rb#6
  def initialize(value); end

  # Returns the value of attribute value.
  #
  # source://kube-dsl//lib/kube-dsl/allow_blank.rb#4
  def value; end
end

# source://kube-dsl//lib/kube-dsl/array_field_res.rb#3
class KubeDSL::ArrayFieldRes
  include ::KubeDSL::StringHelpers
  include ::KubeDSL::RbiHelpers

  # @return [ArrayFieldRes] a new instance of ArrayFieldRes
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#11
  def initialize(name, required, elem_res); end

  # Returns the value of attribute elem_res.
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#7
  def elem_res; end

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#24
  def fields_to_rbi(inflector); end

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#17
  def fields_to_ruby(inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#7
  def name; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#7
  def required; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#7
  def required?; end

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#42
  def serialize_call(inflector); end

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#36
  def validations(inflector); end

  private

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#48
  def plural_name(inflector); end

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#54
  def ruby_type; end
end

# source://kube-dsl//lib/kube-dsl/builder.rb#6
class KubeDSL::Builder
  # @return [Builder] a new instance of Builder
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#11
  def initialize(schema_dir:, output_dir:, autoload_prefix:, inflector:, dsl_namespace:, entrypoint_namespace:); end

  # Returns the value of attribute autoload_prefix.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#7
  def autoload_prefix; end

  # Returns the value of attribute dsl_namespace.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#8
  def dsl_namespace; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#47
  def each_autoload_file(&block); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#70
  def each_resource; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#35
  def each_resource_file; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#43
  def entrypoint(&block); end

  # Returns the value of attribute entrypoint_namespace.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#8
  def entrypoint_namespace; end

  # Returns the value of attribute inflector.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#9
  def inflector; end

  # Returns the value of attribute output_dir.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#7
  def output_dir; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#66
  def parse_ref(ref_str); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#23
  def register_resolver(*prefixes, &resolver); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#29
  def register_serialize_handler(namespace, version, kind, field, &block); end

  # Returns the value of attribute resolvers.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#9
  def resolvers; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#55
  def resource_from_ref(ref); end

  # Returns the value of attribute schema_dir.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#7
  def schema_dir; end

  # Returns the value of attribute serialize_handlers.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#9
  def serialize_handlers; end

  private

  # source://kube-dsl//lib/kube-dsl/builder.rb#141
  def add_doc_to_resource(res, doc); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#166
  def add_prop_to_resource(name, prop, res); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#147
  def add_props_to_resource(properties, res); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#98
  def autoload_map; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#115
  def each_autoload_file_helper(amap, path, &block); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#90
  def load_resources; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#154
  def resolve_ref(ref_str); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#241
  def resource_cache; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#237
  def start_path; end
end

# source://kube-dsl//lib/kube-dsl/dsl.rb#1
module KubeDSL::DSL; end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration.rb#1
module KubeDSL::DSL::Admissionregistration; end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1.rb#1
module KubeDSL::DSL::Admissionregistration::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook.rb#7
class KubeDSL::DSL::Admissionregistration::V1::MutatingWebhook < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def admission_review_versions(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Admissionregistration::V1::WebhookClientConfig).void)
    ).returns(KubeDSL::DSL::Admissionregistration::V1::WebhookClientConfig)
  end
  def client_config(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def client_config_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def failure_policy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook.rb#48
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def match_policy(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def namespace_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def namespace_selector_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def object_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_selector_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def reinvocation_policy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Admissionregistration::V1::RuleWithOperations))
    ).returns(T::Array[KubeDSL::DSL::Admissionregistration::V1::RuleWithOperations])
  end
  def rules(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook.rb#32
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def side_effects(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def timeout_seconds(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration.rb#7
class KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def webhook(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Admissionregistration::V1::MutatingWebhook))
    ).returns(T::Array[KubeDSL::DSL::Admissionregistration::V1::MutatingWebhook])
  end
  def webhooks(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration_list.rb#7
class KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfigurationList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfiguration))
    ).returns(T::Array[KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfiguration])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/rule_with_operations.rb#7
class KubeDSL::DSL::Admissionregistration::V1::RuleWithOperations < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_groups(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def api_versions(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/rule_with_operations.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def operations(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def resources(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def scope(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/rule_with_operations.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/service_reference.rb#7
class KubeDSL::DSL::Admissionregistration::V1::ServiceReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/service_reference.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespace(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def port(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/service_reference.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook.rb#7
class KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhook < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def admission_review_versions(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Admissionregistration::V1::WebhookClientConfig).void)
    ).returns(KubeDSL::DSL::Admissionregistration::V1::WebhookClientConfig)
  end
  def client_config(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def client_config_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def failure_policy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook.rb#45
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def match_policy(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def namespace_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def namespace_selector_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def object_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Admissionregistration::V1::RuleWithOperations))
    ).returns(T::Array[KubeDSL::DSL::Admissionregistration::V1::RuleWithOperations])
  end
  def rules(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook.rb#30
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def side_effects(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def timeout_seconds(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration.rb#7
class KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def webhook(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhook))
    ).returns(T::Array[KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhook])
  end
  def webhooks(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration_list.rb#7
class KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfigurationList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfiguration))
    ).returns(T::Array[KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfiguration])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/webhook_client_config.rb#7
class KubeDSL::DSL::Admissionregistration::V1::WebhookClientConfig < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def ca_bundle(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/webhook_client_config.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/webhook_client_config.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Admissionregistration::V1::ServiceReference).void)
    ).returns(KubeDSL::DSL::Admissionregistration::V1::ServiceReference)
  end
  def service(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def url(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions.rb#1
module KubeDSL::DSL::Apiextensions; end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1.rb#1
module KubeDSL::DSL::Apiextensions::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_column_definition.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceColumnDefinition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def description(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def format(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def json_path(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_column_definition.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def priority(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_column_definition.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_conversion.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceConversion < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_conversion.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_conversion.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def strategy(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::WebhookConversion).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::WebhookConversion)
  end
  def webhook(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def webhook_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionSpec).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionStatus).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_condition.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_list.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinition))
    ).returns(T::Array[KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinition])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_names.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionNames < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def categories(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_names.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def list_kind(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def plural(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_names.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def short_names(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def singular(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_spec.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::CustomResourceConversion).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::CustomResourceConversion)
  end
  def conversion(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def conversion_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def group(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_spec.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionNames).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionNames)
  end
  def names(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def names_present?; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def preserve_unknown_fields(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def scope(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_spec.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def version(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionVersion))
    ).returns(T::Array[KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionVersion])
  end
  def versions(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_status.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionNames).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionNames)
  end
  def accepted_names(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def accepted_names_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionCondition))
    ).returns(T::Array[KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def stored_versions(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_version.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionVersion < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def additional_printer_column(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiextensions::V1::CustomResourceColumnDefinition))
    ).returns(T::Array[KubeDSL::DSL::Apiextensions::V1::CustomResourceColumnDefinition])
  end
  def additional_printer_columns(elem_name = nil, &block); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def deprecated(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def deprecation_warning(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_version.rb#39
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::CustomResourceValidation).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::CustomResourceValidation)
  end
  def schema(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def schema_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_version.rb#26
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def served(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def storage(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresources).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresources)
  end
  def subresources(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def subresources_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresource_scale.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresourceScale < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresource_scale.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def label_selector_path(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresource_scale.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def spec_replicas_path(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def status_replicas_path(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresources.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresources < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresources.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresourceScale).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresourceScale)
  end
  def scale(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresources.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_validation.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceValidation < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_validation.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps)
  end
  def open_apiv3_schema(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def open_apiv3_schema_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_validation.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/external_documentation.rb#7
class KubeDSL::DSL::Apiextensions::V1::ExternalDocumentation < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def description(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/external_documentation.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/external_documentation.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def url(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json.rb#4
class KubeDSL::DSL::Apiextensions::V1::JSON < ::KubeDSL::DSLObject
  sig { params(block: T.nilable(T.proc.void)).void }
  def initialize(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json.rb#5
  sig { returns(JSONType) }
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json.rb#9
  sig { params(val: T.nilable(JSONType)).returns(JSONType) }
  def value(val = T.unsafe(nil)); end

  JSONType = T.type_alias { T.any(
        T::Array[T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped])],
        T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])]
      ) }
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json_schema_props.rb#7
class KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def additional_items(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def additional_properties(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def all_of(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps))
    ).returns(T::Array[KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps])
  end
  def all_ofs(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def all_oves; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def any_of(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps))
    ).returns(T::Array[KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps])
  end
  def any_ofs(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def any_oves; end

  sig { params(val: T.nilable(String)).returns(String) }
  def default(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def definitions(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def dependencies(&block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def description(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ena; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def enum(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiextensions::V1::JSON))
    ).returns(T::Array[KubeDSL::DSL::Apiextensions::V1::JSON])
  end
  def enums(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def example(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def exclusive_maximum(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def exclusive_minimum(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::ExternalDocumentation).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::ExternalDocumentation)
  end
  def external_docs(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_docs_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def format(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def id(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def items(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json_schema_props.rb#141
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def max_items(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def max_length(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def max_properties(val = nil); end

  sig { params(val: T.nilable(T.any(Integer, Float))).returns(T.any(Integer, Float)) }
  def maximum(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min_items(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min_length(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min_properties(val = nil); end

  sig { params(val: T.nilable(T.any(Integer, Float))).returns(T.any(Integer, Float)) }
  def minimum(val = nil); end

  sig { params(val: T.nilable(T.any(Integer, Float))).returns(T.any(Integer, Float)) }
  def multiple_of(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps)
  end
  def not_field(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def not_field_present?; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def nullable(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def one_of(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps))
    ).returns(T::Array[KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps])
  end
  def one_ofs(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def one_oves; end

  sig { params(val: T.nilable(String)).returns(String) }
  def pattern(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def pattern_properties(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def properties(&block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def required(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json_schema_props.rb#94
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def title(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def unique_items(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def x_kubernetes_embedded_resource(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def x_kubernetes_int_or_string(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def x_kubernetes_list_map_keys(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def x_kubernetes_list_type(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def x_kubernetes_map_type(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def x_kubernetes_preserve_unknown_fields(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def x_kubernetes_validation(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiextensions::V1::ValidationRule))
    ).returns(T::Array[KubeDSL::DSL::Apiextensions::V1::ValidationRule])
  end
  def x_kubernetes_validations(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/service_reference.rb#7
class KubeDSL::DSL::Apiextensions::V1::ServiceReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/service_reference.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespace(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def port(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/service_reference.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/validation_rule.rb#7
class KubeDSL::DSL::Apiextensions::V1::ValidationRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/validation_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def rule(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/validation_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_client_config.rb#7
class KubeDSL::DSL::Apiextensions::V1::WebhookClientConfig < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def ca_bundle(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_client_config.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_client_config.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::ServiceReference).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::ServiceReference)
  end
  def service(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def url(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_conversion.rb#7
class KubeDSL::DSL::Apiextensions::V1::WebhookConversion < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiextensions::V1::WebhookClientConfig).void)
    ).returns(KubeDSL::DSL::Apiextensions::V1::WebhookClientConfig)
  end
  def client_config(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def client_config_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def conversion_review_versions(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_conversion.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_conversion.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration.rb#1
module KubeDSL::DSL::Apiregistration; end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1.rb#1
module KubeDSL::DSL::Apiregistration::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service.rb#7
class KubeDSL::DSL::Apiregistration::V1::APIService < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiregistration::V1::APIServiceSpec).void)
    ).returns(KubeDSL::DSL::Apiregistration::V1::APIServiceSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiregistration::V1::APIServiceStatus).void)
    ).returns(KubeDSL::DSL::Apiregistration::V1::APIServiceStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_condition.rb#7
class KubeDSL::DSL::Apiregistration::V1::APIServiceCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_list.rb#7
class KubeDSL::DSL::Apiregistration::V1::APIServiceList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiregistration::V1::APIService))
    ).returns(T::Array[KubeDSL::DSL::Apiregistration::V1::APIService])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_spec.rb#7
class KubeDSL::DSL::Apiregistration::V1::APIServiceSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def ca_bundle(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def group(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def group_priority_minimum(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def insecure_skip_tls_verify(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_spec.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_spec.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiregistration::V1::ServiceReference).void)
    ).returns(KubeDSL::DSL::Apiregistration::V1::ServiceReference)
  end
  def service(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def version(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def version_priority(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_status.rb#7
class KubeDSL::DSL::Apiregistration::V1::APIServiceStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiregistration::V1::APIServiceCondition))
    ).returns(T::Array[KubeDSL::DSL::Apiregistration::V1::APIServiceCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_status.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_status.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/service_reference.rb#7
class KubeDSL::DSL::Apiregistration::V1::ServiceReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/service_reference.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespace(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def port(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/service_reference.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal.rb#1
module KubeDSL::DSL::Apiserverinternal; end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1.rb#1
module KubeDSL::DSL::Apiserverinternal::V1alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/server_storage_version.rb#7
class KubeDSL::DSL::Apiserverinternal::V1alpha1::ServerStorageVersion < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_server_id(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def decodable_versions(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def encoding_version(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/server_storage_version.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/server_storage_version.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version.rb#7
class KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersion < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def spec(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersionStatus).void)
    ).returns(KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersionStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_condition.rb#7
class KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersionCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_condition.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def observed_generation(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_condition.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_list.rb#7
class KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersionList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersion))
    ).returns(T::Array[KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersion])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_status.rb#7
class KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersionStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def common_encoding_version(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersionCondition))
    ).returns(T::Array[KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersionCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def storage_version(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiserverinternal::V1alpha1::ServerStorageVersion))
    ).returns(T::Array[KubeDSL::DSL::Apiserverinternal::V1alpha1::ServerStorageVersion])
  end
  def storage_versions(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps.rb#1
module KubeDSL::DSL::Apps; end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1.rb#1
module KubeDSL::DSL::Apps::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision.rb#7
class KubeDSL::DSL::Apps::V1::ControllerRevision < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def data(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def revision(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision_list.rb#7
class KubeDSL::DSL::Apps::V1::ControllerRevisionList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apps::V1::ControllerRevision))
    ).returns(T::Array[KubeDSL::DSL::Apps::V1::ControllerRevision])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set.rb#7
class KubeDSL::DSL::Apps::V1::DaemonSet < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::DaemonSetSpec).void)
    ).returns(KubeDSL::DSL::Apps::V1::DaemonSetSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::DaemonSetStatus).void)
    ).returns(KubeDSL::DSL::Apps::V1::DaemonSetStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_condition.rb#7
class KubeDSL::DSL::Apps::V1::DaemonSetCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_list.rb#7
class KubeDSL::DSL::Apps::V1::DaemonSetList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apps::V1::DaemonSet))
    ).returns(T::Array[KubeDSL::DSL::Apps::V1::DaemonSet])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_spec.rb#7
class KubeDSL::DSL::Apps::V1::DaemonSetSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_spec.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min_ready_seconds(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def revision_history_limit(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_spec.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodTemplateSpec).void)
    ).returns(KubeDSL::DSL::V1::PodTemplateSpec)
  end
  def template(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::DaemonSetUpdateStrategy).void)
    ).returns(KubeDSL::DSL::Apps::V1::DaemonSetUpdateStrategy)
  end
  def update_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def update_strategy_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_status.rb#7
class KubeDSL::DSL::Apps::V1::DaemonSetStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def collision_count(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apps::V1::DaemonSetCondition))
    ).returns(T::Array[KubeDSL::DSL::Apps::V1::DaemonSetCondition])
  end
  def conditions(elem_name = nil, &block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def current_number_scheduled(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def desired_number_scheduled(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_status.rb#45
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def number_available(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def number_misscheduled(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def number_ready(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def number_unavailable(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def observed_generation(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_status.rb#30
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def updated_number_scheduled(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_update_strategy.rb#7
class KubeDSL::DSL::Apps::V1::DaemonSetUpdateStrategy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_update_strategy.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::RollingUpdateDaemonSet).void)
    ).returns(KubeDSL::DSL::Apps::V1::RollingUpdateDaemonSet)
  end
  def rolling_update(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def rolling_update_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_update_strategy.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment.rb#7
class KubeDSL::DSL::Apps::V1::Deployment < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::DeploymentSpec).void)
    ).returns(KubeDSL::DSL::Apps::V1::DeploymentSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::DeploymentStatus).void)
    ).returns(KubeDSL::DSL::Apps::V1::DeploymentStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_condition.rb#7
class KubeDSL::DSL::Apps::V1::DeploymentCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_condition.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_update_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_condition.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_list.rb#7
class KubeDSL::DSL::Apps::V1::DeploymentList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apps::V1::Deployment))
    ).returns(T::Array[KubeDSL::DSL::Apps::V1::Deployment])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_spec.rb#7
class KubeDSL::DSL::Apps::V1::DeploymentSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_spec.rb#39
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min_ready_seconds(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def paused(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def progress_deadline_seconds(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def revision_history_limit(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_spec.rb#26
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::DeploymentStrategy).void)
    ).returns(KubeDSL::DSL::Apps::V1::DeploymentStrategy)
  end
  def strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def strategy_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodTemplateSpec).void)
    ).returns(KubeDSL::DSL::V1::PodTemplateSpec)
  end
  def template(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_status.rb#7
class KubeDSL::DSL::Apps::V1::DeploymentStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def available_replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def collision_count(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apps::V1::DeploymentCondition))
    ).returns(T::Array[KubeDSL::DSL::Apps::V1::DeploymentCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_status.rb#39
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def observed_generation(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def ready_replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_status.rb#26
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def unavailable_replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def updated_replicas(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_strategy.rb#7
class KubeDSL::DSL::Apps::V1::DeploymentStrategy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_strategy.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::RollingUpdateDeployment).void)
    ).returns(KubeDSL::DSL::Apps::V1::RollingUpdateDeployment)
  end
  def rolling_update(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def rolling_update_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_strategy.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set.rb#7
class KubeDSL::DSL::Apps::V1::ReplicaSet < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::ReplicaSetSpec).void)
    ).returns(KubeDSL::DSL::Apps::V1::ReplicaSetSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::ReplicaSetStatus).void)
    ).returns(KubeDSL::DSL::Apps::V1::ReplicaSetStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_condition.rb#7
class KubeDSL::DSL::Apps::V1::ReplicaSetCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_list.rb#7
class KubeDSL::DSL::Apps::V1::ReplicaSetList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apps::V1::ReplicaSet))
    ).returns(T::Array[KubeDSL::DSL::Apps::V1::ReplicaSet])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_spec.rb#7
class KubeDSL::DSL::Apps::V1::ReplicaSetSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min_ready_seconds(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def replicas(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodTemplateSpec).void)
    ).returns(KubeDSL::DSL::V1::PodTemplateSpec)
  end
  def template(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_status.rb#7
class KubeDSL::DSL::Apps::V1::ReplicaSetStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def available_replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apps::V1::ReplicaSetCondition))
    ).returns(T::Array[KubeDSL::DSL::Apps::V1::ReplicaSetCondition])
  end
  def conditions(elem_name = nil, &block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def fully_labeled_replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def observed_generation(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def ready_replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_daemon_set.rb#7
class KubeDSL::DSL::Apps::V1::RollingUpdateDaemonSet < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_daemon_set.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def max_surge(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def max_unavailable(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_daemon_set.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_deployment.rb#7
class KubeDSL::DSL::Apps::V1::RollingUpdateDeployment < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_deployment.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def max_surge(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def max_unavailable(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_deployment.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_stateful_set_strategy.rb#7
class KubeDSL::DSL::Apps::V1::RollingUpdateStatefulSetStrategy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_stateful_set_strategy.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def partition(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_stateful_set_strategy.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSet < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::StatefulSetSpec).void)
    ).returns(KubeDSL::DSL::Apps::V1::StatefulSetSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::StatefulSetStatus).void)
    ).returns(KubeDSL::DSL::Apps::V1::StatefulSetStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_condition.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSetCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_list.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSetList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apps::V1::StatefulSet))
    ).returns(T::Array[KubeDSL::DSL::Apps::V1::StatefulSet])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_persistent_volume_claim_retention_policy.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSetPersistentVolumeClaimRetentionPolicy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_persistent_volume_claim_retention_policy.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_persistent_volume_claim_retention_policy.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def when_deleted(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def when_scaled(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_spec.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSetSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_spec.rb#45
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min_ready_seconds(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::StatefulSetPersistentVolumeClaimRetentionPolicy).void)
    ).returns(KubeDSL::DSL::Apps::V1::StatefulSetPersistentVolumeClaimRetentionPolicy)
  end
  def persistent_volume_claim_retention_policy(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def persistent_volume_claim_retention_policy_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def pod_management_policy(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def revision_history_limit(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_spec.rb#30
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def service_name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodTemplateSpec).void)
    ).returns(KubeDSL::DSL::V1::PodTemplateSpec)
  end
  def template(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::StatefulSetUpdateStrategy).void)
    ).returns(KubeDSL::DSL::Apps::V1::StatefulSetUpdateStrategy)
  end
  def update_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def update_strategy_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volume_claim_template(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::PersistentVolumeClaim))
    ).returns(T::Array[KubeDSL::DSL::V1::PersistentVolumeClaim])
  end
  def volume_claim_templates(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_status.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSetStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def available_replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def collision_count(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apps::V1::StatefulSetCondition))
    ).returns(T::Array[KubeDSL::DSL::Apps::V1::StatefulSetCondition])
  end
  def conditions(elem_name = nil, &block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def current_replicas(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def current_revision(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_status.rb#45
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def observed_generation(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def ready_replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_status.rb#30
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def update_revision(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def updated_replicas(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_update_strategy.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSetUpdateStrategy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_update_strategy.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Apps::V1::RollingUpdateStatefulSetStrategy).void)
    ).returns(KubeDSL::DSL::Apps::V1::RollingUpdateStatefulSetStrategy)
  end
  def rolling_update(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def rolling_update_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_update_strategy.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication.rb#1
module KubeDSL::DSL::Authentication; end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1.rb#1
module KubeDSL::DSL::Authentication::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/bound_object_reference.rb#7
class KubeDSL::DSL::Authentication::V1::BoundObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/bound_object_reference.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/bound_object_reference.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def uid(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request.rb#7
class KubeDSL::DSL::Authentication::V1::TokenRequest < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authentication::V1::TokenRequestSpec).void)
    ).returns(KubeDSL::DSL::Authentication::V1::TokenRequestSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authentication::V1::TokenRequestStatus).void)
    ).returns(KubeDSL::DSL::Authentication::V1::TokenRequestStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_spec.rb#7
class KubeDSL::DSL::Authentication::V1::TokenRequestSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def audiences(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authentication::V1::BoundObjectReference).void)
    ).returns(KubeDSL::DSL::Authentication::V1::BoundObjectReference)
  end
  def bound_object_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def bound_object_ref_present?; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def expiration_seconds(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_spec.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_spec.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_status.rb#7
class KubeDSL::DSL::Authentication::V1::TokenRequestStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def expiration_timestamp(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def token(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review.rb#7
class KubeDSL::DSL::Authentication::V1::TokenReview < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authentication::V1::TokenReviewSpec).void)
    ).returns(KubeDSL::DSL::Authentication::V1::TokenReviewSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authentication::V1::TokenReviewStatus).void)
    ).returns(KubeDSL::DSL::Authentication::V1::TokenReviewStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_spec.rb#7
class KubeDSL::DSL::Authentication::V1::TokenReviewSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def audiences(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def token(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_status.rb#7
class KubeDSL::DSL::Authentication::V1::TokenReviewStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def audiences(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def authenticated(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def error(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_status.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_status.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authentication::V1::UserInfo).void)
    ).returns(KubeDSL::DSL::Authentication::V1::UserInfo)
  end
  def user(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def user_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/user_info.rb#7
class KubeDSL::DSL::Authentication::V1::UserInfo < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def extra(&block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def groups(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/user_info.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/user_info.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def uid(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def username(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization.rb#1
module KubeDSL::DSL::Authorization; end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1.rb#1
module KubeDSL::DSL::Authorization::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/local_subject_access_review.rb#7
class KubeDSL::DSL::Authorization::V1::LocalSubjectAccessReview < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/local_subject_access_review.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/local_subject_access_review.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authorization::V1::SubjectAccessReviewSpec).void)
    ).returns(KubeDSL::DSL::Authorization::V1::SubjectAccessReviewSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authorization::V1::SubjectAccessReviewStatus).void)
    ).returns(KubeDSL::DSL::Authorization::V1::SubjectAccessReviewStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_attributes.rb#7
class KubeDSL::DSL::Authorization::V1::NonResourceAttributes < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_attributes.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_attributes.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def verb(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_rule.rb#7
class KubeDSL::DSL::Authorization::V1::NonResourceRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def non_resource_ur_ls(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def verbs(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_attributes.rb#7
class KubeDSL::DSL::Authorization::V1::ResourceAttributes < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def group(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_attributes.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespace(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def resource(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_attributes.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def subresource(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def verb(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def version(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_rule.rb#7
class KubeDSL::DSL::Authorization::V1::ResourceRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_groups(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_rule.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def resource_names(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def resources(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_rule.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def verbs(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review.rb#7
class KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReview < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReviewSpec).void)
    ).returns(KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReviewSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authorization::V1::SubjectAccessReviewStatus).void)
    ).returns(KubeDSL::DSL::Authorization::V1::SubjectAccessReviewStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review_spec.rb#7
class KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReviewSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authorization::V1::NonResourceAttributes).void)
    ).returns(KubeDSL::DSL::Authorization::V1::NonResourceAttributes)
  end
  def non_resource_attributes(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def non_resource_attributes_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authorization::V1::ResourceAttributes).void)
    ).returns(KubeDSL::DSL::Authorization::V1::ResourceAttributes)
  end
  def resource_attributes(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_attributes_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review.rb#7
class KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReview < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReviewSpec).void)
    ).returns(KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReviewSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authorization::V1::SubjectRulesReviewStatus).void)
    ).returns(KubeDSL::DSL::Authorization::V1::SubjectRulesReviewStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review_spec.rb#7
class KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReviewSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review_spec.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespace(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review_spec.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review.rb#7
class KubeDSL::DSL::Authorization::V1::SubjectAccessReview < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authorization::V1::SubjectAccessReviewSpec).void)
    ).returns(KubeDSL::DSL::Authorization::V1::SubjectAccessReviewSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authorization::V1::SubjectAccessReviewStatus).void)
    ).returns(KubeDSL::DSL::Authorization::V1::SubjectAccessReviewStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_spec.rb#7
class KubeDSL::DSL::Authorization::V1::SubjectAccessReviewSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def extra(&block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def groups(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_spec.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authorization::V1::NonResourceAttributes).void)
    ).returns(KubeDSL::DSL::Authorization::V1::NonResourceAttributes)
  end
  def non_resource_attributes(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def non_resource_attributes_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Authorization::V1::ResourceAttributes).void)
    ).returns(KubeDSL::DSL::Authorization::V1::ResourceAttributes)
  end
  def resource_attributes(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_attributes_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_spec.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def uid(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def user(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_status.rb#7
class KubeDSL::DSL::Authorization::V1::SubjectAccessReviewStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def allowed(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def denied(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def evaluation_error(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_status.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_status.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_rules_review_status.rb#7
class KubeDSL::DSL::Authorization::V1::SubjectRulesReviewStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def evaluation_error(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def incomplete(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_rules_review_status.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def non_resource_rule(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Authorization::V1::NonResourceRule))
    ).returns(T::Array[KubeDSL::DSL::Authorization::V1::NonResourceRule])
  end
  def non_resource_rules(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def resource_rule(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Authorization::V1::ResourceRule))
    ).returns(T::Array[KubeDSL::DSL::Authorization::V1::ResourceRule])
  end
  def resource_rules(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_rules_review_status.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling.rb#1
module KubeDSL::DSL::Autoscaling; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1.rb#1
module KubeDSL::DSL::Autoscaling::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/cross_version_object_reference.rb#7
class KubeDSL::DSL::Autoscaling::V1::CrossVersionObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/cross_version_object_reference.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/cross_version_object_reference.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler.rb#7
class KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscaler < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerSpec).void)
    ).returns(KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_list.rb#7
class KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscaler))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscaler])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_spec.rb#7
class KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def max_replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min_replicas(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V1::CrossVersionObjectReference).void)
    ).returns(KubeDSL::DSL::Autoscaling::V1::CrossVersionObjectReference)
  end
  def scale_target_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_target_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def target_cpu_utilization_percentage(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_status.rb#7
class KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def current_cpu_utilization_percentage(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def current_replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def desired_replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_status.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_scale_time(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def observed_generation(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_status.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale.rb#7
class KubeDSL::DSL::Autoscaling::V1::Scale < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V1::ScaleSpec).void)
    ).returns(KubeDSL::DSL::Autoscaling::V1::ScaleSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V1::ScaleStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V1::ScaleStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_spec.rb#7
class KubeDSL::DSL::Autoscaling::V1::ScaleSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_spec.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_spec.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_status.rb#7
class KubeDSL::DSL::Autoscaling::V1::ScaleStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def replicas(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def selector(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2.rb#1
module KubeDSL::DSL::Autoscaling::V2; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/container_resource_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def container(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/container_resource_metric_source.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/container_resource_metric_source.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricTarget).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricTarget)
  end
  def target(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/container_resource_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def container(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricValueStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricValueStatus)
  end
  def current(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/container_resource_metric_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/container_resource_metric_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/cross_version_object_reference.rb#7
class KubeDSL::DSL::Autoscaling::V2::CrossVersionObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/cross_version_object_reference.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/cross_version_object_reference.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/external_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2::ExternalMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/external_metric_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricIdentifier).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricIdentifier)
  end
  def metric(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/external_metric_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricTarget).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricTarget)
  end
  def target(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/external_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::ExternalMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricValueStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricValueStatus)
  end
  def current(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/external_metric_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricIdentifier).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricIdentifier)
  end
  def metric(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/external_metric_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/hpa_scaling_policy.rb#7
class KubeDSL::DSL::Autoscaling::V2::HPAScalingPolicy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/hpa_scaling_policy.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def period_seconds(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/hpa_scaling_policy.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/hpa_scaling_rules.rb#7
class KubeDSL::DSL::Autoscaling::V2::HPAScalingRules < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/hpa_scaling_rules.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2::HPAScalingPolicy))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2::HPAScalingPolicy])
  end
  def policies(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def policy(elem_name = T.unsafe(nil), &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def select_policy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/hpa_scaling_rules.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def stabilization_window_seconds(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler.rb#7
class KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscaler < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerSpec).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_behavior.rb#7
class KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerBehavior < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_behavior.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::HPAScalingRules).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::HPAScalingRules)
  end
  def scale_down(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_down_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::HPAScalingRules).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::HPAScalingRules)
  end
  def scale_up(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_up_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_behavior.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_condition.rb#7
class KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_list.rb#7
class KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscaler))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscaler])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_spec.rb#7
class KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerBehavior).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerBehavior)
  end
  def behavior(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def behavior_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_spec.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def max_replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def metric(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2::MetricSpec))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2::MetricSpec])
  end
  def metrics(elem_name = nil, &block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min_replicas(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::CrossVersionObjectReference).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::CrossVersionObjectReference)
  end
  def scale_target_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_target_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_spec.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerCondition))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def current_metric(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2::MetricStatus))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2::MetricStatus])
  end
  def current_metrics(elem_name = nil, &block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def current_replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def desired_replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_scale_time(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def observed_generation(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_identifier.rb#7
class KubeDSL::DSL::Autoscaling::V2::MetricIdentifier < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_identifier.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_identifier.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_spec.rb#7
class KubeDSL::DSL::Autoscaling::V2::MetricSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricSource)
  end
  def container_resource(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def container_resource_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::ExternalMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::ExternalMetricSource)
  end
  def external(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_spec.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::ObjectMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::ObjectMetricSource)
  end
  def object(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::PodsMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::PodsMetricSource)
  end
  def pods(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pods_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::ResourceMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::ResourceMetricSource)
  end
  def resource(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_spec.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::MetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricStatus)
  end
  def container_resource(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def container_resource_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::ExternalMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::ExternalMetricStatus)
  end
  def external(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::ObjectMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::ObjectMetricStatus)
  end
  def object(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::PodsMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::PodsMetricStatus)
  end
  def pods(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pods_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::ResourceMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::ResourceMetricStatus)
  end
  def resource(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_target.rb#7
class KubeDSL::DSL::Autoscaling::V2::MetricTarget < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def average_utilization(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def average_value(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_target.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_target.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_value_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::MetricValueStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def average_utilization(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def average_value(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_value_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_value_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/object_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2::ObjectMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::CrossVersionObjectReference).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::CrossVersionObjectReference)
  end
  def described_object(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def described_object_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/object_metric_source.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricIdentifier).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricIdentifier)
  end
  def metric(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/object_metric_source.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricTarget).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricTarget)
  end
  def target(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/object_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::ObjectMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricValueStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricValueStatus)
  end
  def current(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::CrossVersionObjectReference).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::CrossVersionObjectReference)
  end
  def described_object(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def described_object_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/object_metric_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricIdentifier).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricIdentifier)
  end
  def metric(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/object_metric_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/pods_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2::PodsMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/pods_metric_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricIdentifier).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricIdentifier)
  end
  def metric(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/pods_metric_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricTarget).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricTarget)
  end
  def target(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/pods_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::PodsMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricValueStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricValueStatus)
  end
  def current(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/pods_metric_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricIdentifier).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricIdentifier)
  end
  def metric(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/pods_metric_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/resource_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2::ResourceMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/resource_metric_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/resource_metric_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricTarget).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricTarget)
  end
  def target(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/resource_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::ResourceMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2::MetricValueStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2::MetricValueStatus)
  end
  def current(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/resource_metric_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/resource_metric_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1.rb#1
module KubeDSL::DSL::Autoscaling::V2beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/container_resource_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ContainerResourceMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def container(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/container_resource_metric_source.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/container_resource_metric_source.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def target_average_utilization(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def target_average_value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/container_resource_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ContainerResourceMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def container(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def current_average_utilization(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def current_average_value(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/container_resource_metric_status.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/container_resource_metric_status.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/cross_version_object_reference.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::CrossVersionObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/cross_version_object_reference.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/cross_version_object_reference.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ExternalMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_source.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def metric_name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def metric_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_source.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def target_average_value(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def target_value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ExternalMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def current_average_value(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def current_value(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_status.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def metric_name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def metric_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_status.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscaler < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerSpec).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_condition.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_list.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscaler))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscaler])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_spec.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def max_replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def metric(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2beta1::MetricSpec))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2beta1::MetricSpec])
  end
  def metrics(elem_name = nil, &block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min_replicas(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::CrossVersionObjectReference).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::CrossVersionObjectReference)
  end
  def scale_target_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_target_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerCondition))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def current_metric(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2beta1::MetricStatus))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2beta1::MetricStatus])
  end
  def current_metrics(elem_name = nil, &block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def current_replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def desired_replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_scale_time(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def observed_generation(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_spec.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::MetricSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::ContainerResourceMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::ContainerResourceMetricSource)
  end
  def container_resource(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def container_resource_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::ExternalMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::ExternalMetricSource)
  end
  def external(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_spec.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::ObjectMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::ObjectMetricSource)
  end
  def object(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::PodsMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::PodsMetricSource)
  end
  def pods(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pods_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::ResourceMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::ResourceMetricSource)
  end
  def resource(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_spec.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::MetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::ContainerResourceMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::ContainerResourceMetricStatus)
  end
  def container_resource(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def container_resource_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::ExternalMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::ExternalMetricStatus)
  end
  def external(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::ObjectMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::ObjectMetricStatus)
  end
  def object(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::PodsMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::PodsMetricStatus)
  end
  def pods(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pods_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::ResourceMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::ResourceMetricStatus)
  end
  def resource(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ObjectMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def average_value(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_source.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def metric_name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_source.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::CrossVersionObjectReference).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::CrossVersionObjectReference)
  end
  def target(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def target_value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ObjectMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def average_value(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def current_value(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_status.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def metric_name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_status.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta1::CrossVersionObjectReference).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta1::CrossVersionObjectReference)
  end
  def target(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::PodsMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_source.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def metric_name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_source.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def target_average_value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::PodsMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def current_average_value(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def metric_name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ResourceMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_source.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_source.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def target_average_utilization(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def target_average_value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ResourceMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def current_average_utilization(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def current_average_value(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2.rb#1
module KubeDSL::DSL::Autoscaling::V2beta2; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/container_resource_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ContainerResourceMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def container(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/container_resource_metric_source.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/container_resource_metric_source.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricTarget).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricTarget)
  end
  def target(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/container_resource_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ContainerResourceMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def container(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricValueStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricValueStatus)
  end
  def current(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/container_resource_metric_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/container_resource_metric_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/cross_version_object_reference.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::CrossVersionObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/cross_version_object_reference.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/cross_version_object_reference.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ExternalMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier)
  end
  def metric(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricTarget).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricTarget)
  end
  def target(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ExternalMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricValueStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricValueStatus)
  end
  def current(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier)
  end
  def metric(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/hpa_scaling_policy.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HPAScalingPolicy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/hpa_scaling_policy.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def period_seconds(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/hpa_scaling_policy.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/hpa_scaling_rules.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HPAScalingRules < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/hpa_scaling_rules.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2beta2::HPAScalingPolicy))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2beta2::HPAScalingPolicy])
  end
  def policies(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def policy(elem_name = T.unsafe(nil), &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def select_policy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/hpa_scaling_rules.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def stabilization_window_seconds(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscaler < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerSpec).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_behavior.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerBehavior < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_behavior.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::HPAScalingRules).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::HPAScalingRules)
  end
  def scale_down(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_down_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::HPAScalingRules).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::HPAScalingRules)
  end
  def scale_up(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_up_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_behavior.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_condition.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_list.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscaler))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscaler])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_spec.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerBehavior).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerBehavior)
  end
  def behavior(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def behavior_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_spec.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def max_replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def metric(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricSpec))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2beta2::MetricSpec])
  end
  def metrics(elem_name = nil, &block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min_replicas(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::CrossVersionObjectReference).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::CrossVersionObjectReference)
  end
  def scale_target_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_target_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_spec.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerCondition))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def current_metric(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricStatus))
    ).returns(T::Array[KubeDSL::DSL::Autoscaling::V2beta2::MetricStatus])
  end
  def current_metrics(elem_name = nil, &block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def current_replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def desired_replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_scale_time(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def observed_generation(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_identifier.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_identifier.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_identifier.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_spec.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::MetricSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::ContainerResourceMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::ContainerResourceMetricSource)
  end
  def container_resource(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def container_resource_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::ExternalMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::ExternalMetricSource)
  end
  def external(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_spec.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::ObjectMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::ObjectMetricSource)
  end
  def object(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::PodsMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::PodsMetricSource)
  end
  def pods(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pods_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::ResourceMetricSource).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::ResourceMetricSource)
  end
  def resource(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_spec.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::MetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::ContainerResourceMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::ContainerResourceMetricStatus)
  end
  def container_resource(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def container_resource_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::ExternalMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::ExternalMetricStatus)
  end
  def external(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::ObjectMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::ObjectMetricStatus)
  end
  def object(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::PodsMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::PodsMetricStatus)
  end
  def pods(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pods_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::ResourceMetricStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::ResourceMetricStatus)
  end
  def resource(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_target.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::MetricTarget < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def average_utilization(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def average_value(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_target.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_target.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_value_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::MetricValueStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def average_utilization(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def average_value(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_value_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_value_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ObjectMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::CrossVersionObjectReference).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::CrossVersionObjectReference)
  end
  def described_object(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def described_object_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_source.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier)
  end
  def metric(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_source.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricTarget).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricTarget)
  end
  def target(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ObjectMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricValueStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricValueStatus)
  end
  def current(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::CrossVersionObjectReference).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::CrossVersionObjectReference)
  end
  def described_object(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def described_object_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier)
  end
  def metric(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::PodsMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier)
  end
  def metric(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricTarget).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricTarget)
  end
  def target(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::PodsMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricValueStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricValueStatus)
  end
  def current(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier)
  end
  def metric(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ResourceMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricTarget).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricTarget)
  end
  def target(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ResourceMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Autoscaling::V2beta2::MetricValueStatus).void)
    ).returns(KubeDSL::DSL::Autoscaling::V2beta2::MetricValueStatus)
  end
  def current(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch.rb#1
module KubeDSL::DSL::Batch; end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1.rb#1
module KubeDSL::DSL::Batch::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job.rb#7
class KubeDSL::DSL::Batch::V1::CronJob < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Batch::V1::CronJobSpec).void)
    ).returns(KubeDSL::DSL::Batch::V1::CronJobSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Batch::V1::CronJobStatus).void)
    ).returns(KubeDSL::DSL::Batch::V1::CronJobStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_list.rb#7
class KubeDSL::DSL::Batch::V1::CronJobList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Batch::V1::CronJob))
    ).returns(T::Array[KubeDSL::DSL::Batch::V1::CronJob])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_spec.rb#7
class KubeDSL::DSL::Batch::V1::CronJobSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def concurrency_policy(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def failed_jobs_history_limit(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Batch::V1::JobTemplateSpec).void)
    ).returns(KubeDSL::DSL::Batch::V1::JobTemplateSpec)
  end
  def job_template(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def job_template_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_spec.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def schedule(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_spec.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def starting_deadline_seconds(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def successful_jobs_history_limit(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def suspend(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_status.rb#7
class KubeDSL::DSL::Batch::V1::CronJobStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def active(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ObjectReference))
    ).returns(T::Array[KubeDSL::DSL::V1::ObjectReference])
  end
  def actives(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_schedule_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_successful_time(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job.rb#7
class KubeDSL::DSL::Batch::V1::Job < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Batch::V1::JobSpec).void)
    ).returns(KubeDSL::DSL::Batch::V1::JobSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Batch::V1::JobStatus).void)
    ).returns(KubeDSL::DSL::Batch::V1::JobStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_condition.rb#7
class KubeDSL::DSL::Batch::V1::JobCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_condition.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_probe_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_condition.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_list.rb#7
class KubeDSL::DSL::Batch::V1::JobList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Batch::V1::Job))
    ).returns(T::Array[KubeDSL::DSL::Batch::V1::Job])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_spec.rb#7
class KubeDSL::DSL::Batch::V1::JobSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def active_deadline_seconds(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def backoff_limit(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def completion_mode(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def completions(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_spec.rb#45
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def manual_selector(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def parallelism(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_spec.rb#30
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def suspend(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodTemplateSpec).void)
    ).returns(KubeDSL::DSL::V1::PodTemplateSpec)
  end
  def template(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def ttl_seconds_after_finished(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_status.rb#7
class KubeDSL::DSL::Batch::V1::JobStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def active(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def completed_indexes(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def completion_time(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Batch::V1::JobCondition))
    ).returns(T::Array[KubeDSL::DSL::Batch::V1::JobCondition])
  end
  def conditions(elem_name = nil, &block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def failed(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_status.rb#42
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def ready(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_status.rb#28
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def start_time(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def succeeded(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Batch::V1::UncountedTerminatedPods).void)
    ).returns(KubeDSL::DSL::Batch::V1::UncountedTerminatedPods)
  end
  def uncounted_terminated_pods(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def uncounted_terminated_pods_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_template_spec.rb#7
class KubeDSL::DSL::Batch::V1::JobTemplateSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_template_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_template_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Batch::V1::JobSpec).void)
    ).returns(KubeDSL::DSL::Batch::V1::JobSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/uncounted_terminated_pods.rb#7
class KubeDSL::DSL::Batch::V1::UncountedTerminatedPods < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def failed(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/uncounted_terminated_pods.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/uncounted_terminated_pods.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def succeeded(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1.rb#1
module KubeDSL::DSL::Batch::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job.rb#7
class KubeDSL::DSL::Batch::V1beta1::CronJob < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Batch::V1beta1::CronJobSpec).void)
    ).returns(KubeDSL::DSL::Batch::V1beta1::CronJobSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Batch::V1beta1::CronJobStatus).void)
    ).returns(KubeDSL::DSL::Batch::V1beta1::CronJobStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_list.rb#7
class KubeDSL::DSL::Batch::V1beta1::CronJobList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Batch::V1beta1::CronJob))
    ).returns(T::Array[KubeDSL::DSL::Batch::V1beta1::CronJob])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_spec.rb#7
class KubeDSL::DSL::Batch::V1beta1::CronJobSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def concurrency_policy(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def failed_jobs_history_limit(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Batch::V1beta1::JobTemplateSpec).void)
    ).returns(KubeDSL::DSL::Batch::V1beta1::JobTemplateSpec)
  end
  def job_template(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def job_template_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_spec.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def schedule(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_spec.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def starting_deadline_seconds(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def successful_jobs_history_limit(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def suspend(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_status.rb#7
class KubeDSL::DSL::Batch::V1beta1::CronJobStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def active(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ObjectReference))
    ).returns(T::Array[KubeDSL::DSL::V1::ObjectReference])
  end
  def actives(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_schedule_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_successful_time(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/job_template_spec.rb#7
class KubeDSL::DSL::Batch::V1beta1::JobTemplateSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/job_template_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/job_template_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Batch::V1::JobSpec).void)
    ).returns(KubeDSL::DSL::Batch::V1::JobSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates.rb#1
module KubeDSL::DSL::Certificates; end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1.rb#1
module KubeDSL::DSL::Certificates::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request.rb#7
class KubeDSL::DSL::Certificates::V1::CertificateSigningRequest < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Certificates::V1::CertificateSigningRequestSpec).void)
    ).returns(KubeDSL::DSL::Certificates::V1::CertificateSigningRequestSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Certificates::V1::CertificateSigningRequestStatus).void)
    ).returns(KubeDSL::DSL::Certificates::V1::CertificateSigningRequestStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_condition.rb#7
class KubeDSL::DSL::Certificates::V1::CertificateSigningRequestCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_condition.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_update_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_condition.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_list.rb#7
class KubeDSL::DSL::Certificates::V1::CertificateSigningRequestList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Certificates::V1::CertificateSigningRequest))
    ).returns(T::Array[KubeDSL::DSL::Certificates::V1::CertificateSigningRequest])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_spec.rb#7
class KubeDSL::DSL::Certificates::V1::CertificateSigningRequestSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def expiration_seconds(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def extra(&block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def groups(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_spec.rb#39
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def request(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_spec.rb#26
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def signer_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def uid(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def usages(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def username(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_status.rb#7
class KubeDSL::DSL::Certificates::V1::CertificateSigningRequestStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def certificate(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Certificates::V1::CertificateSigningRequestCondition))
    ).returns(T::Array[KubeDSL::DSL::Certificates::V1::CertificateSigningRequestCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/coordination.rb#1
module KubeDSL::DSL::Coordination; end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1.rb#1
module KubeDSL::DSL::Coordination::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease.rb#7
class KubeDSL::DSL::Coordination::V1::Lease < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Coordination::V1::LeaseSpec).void)
    ).returns(KubeDSL::DSL::Coordination::V1::LeaseSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_list.rb#7
class KubeDSL::DSL::Coordination::V1::LeaseList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Coordination::V1::Lease))
    ).returns(T::Array[KubeDSL::DSL::Coordination::V1::Lease])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_spec.rb#7
class KubeDSL::DSL::Coordination::V1::LeaseSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def acquire_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def holder_identity(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_spec.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def lease_duration_seconds(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def lease_transitions(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def renew_time(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_spec.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery.rb#1
module KubeDSL::DSL::Discovery; end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1.rb#1
module KubeDSL::DSL::Discovery::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint.rb#7
class KubeDSL::DSL::Discovery::V1::Endpoint < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def addresses(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Discovery::V1::EndpointConditions).void)
    ).returns(KubeDSL::DSL::Discovery::V1::EndpointConditions)
  end
  def conditions(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def conditions_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def deprecated_topology(&block); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Discovery::V1::EndpointHints).void)
    ).returns(KubeDSL::DSL::Discovery::V1::EndpointHints)
  end
  def hints(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def hints_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def hostname(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint.rb#39
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def node_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint.rb#26
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectReference).void)
    ).returns(KubeDSL::DSL::V1::ObjectReference)
  end
  def target_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_ref_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def zone(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_conditions.rb#7
class KubeDSL::DSL::Discovery::V1::EndpointConditions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_conditions.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def ready(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_conditions.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def serving(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def terminating(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_hints.rb#7
class KubeDSL::DSL::Discovery::V1::EndpointHints < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def for_zone(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Discovery::V1::ForZone))
    ).returns(T::Array[KubeDSL::DSL::Discovery::V1::ForZone])
  end
  def for_zones(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_hints.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_hints.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_port.rb#7
class KubeDSL::DSL::Discovery::V1::EndpointPort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def app_protocol(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_port.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def port(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def protocol(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_port.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_slice.rb#7
class KubeDSL::DSL::Discovery::V1::EndpointSlice < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def address_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def endpoint(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Discovery::V1::Endpoint))
    ).returns(T::Array[KubeDSL::DSL::Discovery::V1::Endpoint])
  end
  def endpoints(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_slice.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Discovery::V1::EndpointPort))
    ).returns(T::Array[KubeDSL::DSL::Discovery::V1::EndpointPort])
  end
  def ports(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_slice.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_slice_list.rb#7
class KubeDSL::DSL::Discovery::V1::EndpointSliceList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Discovery::V1::EndpointSlice))
    ).returns(T::Array[KubeDSL::DSL::Discovery::V1::EndpointSlice])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_slice_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_slice_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/for_zone.rb#7
class KubeDSL::DSL::Discovery::V1::ForZone < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/for_zone.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/for_zone.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1.rb#1
module KubeDSL::DSL::Discovery::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint.rb#7
class KubeDSL::DSL::Discovery::V1beta1::Endpoint < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def addresses(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Discovery::V1beta1::EndpointConditions).void)
    ).returns(KubeDSL::DSL::Discovery::V1beta1::EndpointConditions)
  end
  def conditions(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def conditions_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Discovery::V1beta1::EndpointHints).void)
    ).returns(KubeDSL::DSL::Discovery::V1beta1::EndpointHints)
  end
  def hints(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def hints_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def hostname(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def node_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectReference).void)
    ).returns(KubeDSL::DSL::V1::ObjectReference)
  end
  def target_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def topology(&block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_conditions.rb#7
class KubeDSL::DSL::Discovery::V1beta1::EndpointConditions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_conditions.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def ready(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_conditions.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def serving(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def terminating(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_hints.rb#7
class KubeDSL::DSL::Discovery::V1beta1::EndpointHints < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def for_zone(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Discovery::V1beta1::ForZone))
    ).returns(T::Array[KubeDSL::DSL::Discovery::V1beta1::ForZone])
  end
  def for_zones(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_hints.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_hints.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_port.rb#7
class KubeDSL::DSL::Discovery::V1beta1::EndpointPort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def app_protocol(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_port.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def port(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def protocol(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_port.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice.rb#7
class KubeDSL::DSL::Discovery::V1beta1::EndpointSlice < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def address_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def endpoint(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Discovery::V1beta1::Endpoint))
    ).returns(T::Array[KubeDSL::DSL::Discovery::V1beta1::Endpoint])
  end
  def endpoints(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Discovery::V1beta1::EndpointPort))
    ).returns(T::Array[KubeDSL::DSL::Discovery::V1beta1::EndpointPort])
  end
  def ports(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice_list.rb#7
class KubeDSL::DSL::Discovery::V1beta1::EndpointSliceList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Discovery::V1beta1::EndpointSlice))
    ).returns(T::Array[KubeDSL::DSL::Discovery::V1beta1::EndpointSlice])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/for_zone.rb#7
class KubeDSL::DSL::Discovery::V1beta1::ForZone < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/for_zone.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/for_zone.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/events.rb#1
module KubeDSL::DSL::Events; end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1.rb#1
module KubeDSL::DSL::Events::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1/event.rb#7
class KubeDSL::DSL::Events::V1::Event < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def action(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def deprecated_count(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def deprecated_first_timestamp(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def deprecated_last_timestamp(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::EventSource).void)
    ).returns(KubeDSL::DSL::V1::EventSource)
  end
  def deprecated_source(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def deprecated_source_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def event_time(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1/event.rb#62
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def note(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectReference).void)
    ).returns(KubeDSL::DSL::V1::ObjectReference)
  end
  def regarding(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def regarding_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectReference).void)
    ).returns(KubeDSL::DSL::V1::ObjectReference)
  end
  def related(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def related_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def reporting_controller(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reporting_instance(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1/event.rb#40
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Events::V1::EventSeries).void)
    ).returns(KubeDSL::DSL::Events::V1::EventSeries)
  end
  def series(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def series_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1/event_list.rb#7
class KubeDSL::DSL::Events::V1::EventList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Events::V1::Event))
    ).returns(T::Array[KubeDSL::DSL::Events::V1::Event])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1/event_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1/event_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1/event_series.rb#7
class KubeDSL::DSL::Events::V1::EventSeries < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def count(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1/event_series.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_observed_time(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1/event_series.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1.rb#1
module KubeDSL::DSL::Events::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event.rb#7
class KubeDSL::DSL::Events::V1beta1::Event < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def action(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def deprecated_count(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def deprecated_first_timestamp(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def deprecated_last_timestamp(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::EventSource).void)
    ).returns(KubeDSL::DSL::V1::EventSource)
  end
  def deprecated_source(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def deprecated_source_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def event_time(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event.rb#62
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def note(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectReference).void)
    ).returns(KubeDSL::DSL::V1::ObjectReference)
  end
  def regarding(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def regarding_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectReference).void)
    ).returns(KubeDSL::DSL::V1::ObjectReference)
  end
  def related(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def related_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def reporting_controller(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reporting_instance(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event.rb#40
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Events::V1beta1::EventSeries).void)
    ).returns(KubeDSL::DSL::Events::V1beta1::EventSeries)
  end
  def series(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def series_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_list.rb#7
class KubeDSL::DSL::Events::V1beta1::EventList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Events::V1beta1::Event))
    ).returns(T::Array[KubeDSL::DSL::Events::V1beta1::Event])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_series.rb#7
class KubeDSL::DSL::Events::V1beta1::EventSeries < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def count(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_series.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_observed_time(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_series.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol.rb#1
module KubeDSL::DSL::Flowcontrol; end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1.rb#1
module KubeDSL::DSL::Flowcontrol::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_distinguisher_method.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::FlowDistinguisherMethod < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_distinguisher_method.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_distinguisher_method.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchema < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaSpec).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaStatus).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_condition.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_list.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchema))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchema])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_spec.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta1::FlowDistinguisherMethod).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta1::FlowDistinguisherMethod)
  end
  def distinguisher_method(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def distinguisher_method_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def matching_precedence(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationReference).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationReference)
  end
  def priority_level_configuration(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def priority_level_configuration_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta1::PolicyRulesWithSubjects))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta1::PolicyRulesWithSubjects])
  end
  def rules(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_status.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaCondition))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_status.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_status.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/group_subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::GroupSubject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/group_subject.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/group_subject.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/limit_response.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::LimitResponse < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/limit_response.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta1::QueuingConfiguration).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta1::QueuingConfiguration)
  end
  def queuing(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def queuing_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/limit_response.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/limited_priority_level_configuration.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::LimitedPriorityLevelConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def assured_concurrency_shares(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/limited_priority_level_configuration.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta1::LimitResponse).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta1::LimitResponse)
  end
  def limit_response(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def limit_response_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/limited_priority_level_configuration.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/non_resource_policy_rule.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::NonResourcePolicyRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/non_resource_policy_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def non_resource_ur_ls(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/non_resource_policy_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def verbs(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/policy_rules_with_subjects.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PolicyRulesWithSubjects < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/policy_rules_with_subjects.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def non_resource_rule(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta1::NonResourcePolicyRule))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta1::NonResourcePolicyRule])
  end
  def non_resource_rules(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def resource_rule(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta1::ResourcePolicyRule))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta1::ResourcePolicyRule])
  end
  def resource_rules(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/policy_rules_with_subjects.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def subject(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta1::Subject))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta1::Subject])
  end
  def subjects(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationSpec).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationStatus).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_condition.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_list.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfiguration))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfiguration])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_reference.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_reference.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_reference.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_spec.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta1::LimitedPriorityLevelConfiguration).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta1::LimitedPriorityLevelConfiguration)
  end
  def limited(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def limited_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_status.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationCondition))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_status.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_status.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/queuing_configuration.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::QueuingConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def hand_size(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/queuing_configuration.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def queue_length_limit(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def queues(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/queuing_configuration.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/resource_policy_rule.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::ResourcePolicyRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_groups(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def cluster_scope(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/resource_policy_rule.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespaces(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def resources(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/resource_policy_rule.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def verbs(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/service_account_subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::ServiceAccountSubject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/service_account_subject.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespace(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/service_account_subject.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::Subject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta1::GroupSubject).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta1::GroupSubject)
  end
  def group(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def group_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/subject.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/subject.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta1::ServiceAccountSubject).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta1::ServiceAccountSubject)
  end
  def service_account(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_account_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta1::UserSubject).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta1::UserSubject)
  end
  def user(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def user_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/user_subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::UserSubject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/user_subject.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/user_subject.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2.rb#1
module KubeDSL::DSL::Flowcontrol::V1beta2; end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_distinguisher_method.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::FlowDistinguisherMethod < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_distinguisher_method.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_distinguisher_method.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchema < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaSpec).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaStatus).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_condition.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_list.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchema))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchema])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_spec.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta2::FlowDistinguisherMethod).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta2::FlowDistinguisherMethod)
  end
  def distinguisher_method(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def distinguisher_method_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def matching_precedence(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationReference).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationReference)
  end
  def priority_level_configuration(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def priority_level_configuration_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta2::PolicyRulesWithSubjects))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta2::PolicyRulesWithSubjects])
  end
  def rules(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_status.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaCondition))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_status.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_status.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/group_subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::GroupSubject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/group_subject.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/group_subject.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/limit_response.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::LimitResponse < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/limit_response.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta2::QueuingConfiguration).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta2::QueuingConfiguration)
  end
  def queuing(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def queuing_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/limit_response.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/limited_priority_level_configuration.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::LimitedPriorityLevelConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def assured_concurrency_shares(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/limited_priority_level_configuration.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta2::LimitResponse).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta2::LimitResponse)
  end
  def limit_response(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def limit_response_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/limited_priority_level_configuration.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/non_resource_policy_rule.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::NonResourcePolicyRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/non_resource_policy_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def non_resource_ur_ls(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/non_resource_policy_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def verbs(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/policy_rules_with_subjects.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PolicyRulesWithSubjects < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/policy_rules_with_subjects.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def non_resource_rule(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta2::NonResourcePolicyRule))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta2::NonResourcePolicyRule])
  end
  def non_resource_rules(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def resource_rule(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta2::ResourcePolicyRule))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta2::ResourcePolicyRule])
  end
  def resource_rules(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/policy_rules_with_subjects.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def subject(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta2::Subject))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta2::Subject])
  end
  def subjects(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationSpec).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationStatus).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_condition.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_list.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfiguration))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfiguration])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_reference.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_reference.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_reference.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_spec.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta2::LimitedPriorityLevelConfiguration).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta2::LimitedPriorityLevelConfiguration)
  end
  def limited(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def limited_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_status.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationCondition))
    ).returns(T::Array[KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_status.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_status.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/queuing_configuration.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::QueuingConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def hand_size(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/queuing_configuration.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def queue_length_limit(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def queues(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/queuing_configuration.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/resource_policy_rule.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::ResourcePolicyRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_groups(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def cluster_scope(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/resource_policy_rule.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespaces(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def resources(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/resource_policy_rule.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def verbs(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/service_account_subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::ServiceAccountSubject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/service_account_subject.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespace(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/service_account_subject.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::Subject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta2::GroupSubject).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta2::GroupSubject)
  end
  def group(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def group_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/subject.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/subject.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta2::ServiceAccountSubject).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta2::ServiceAccountSubject)
  end
  def service_account(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_account_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Flowcontrol::V1beta2::UserSubject).void)
    ).returns(KubeDSL::DSL::Flowcontrol::V1beta2::UserSubject)
  end
  def user(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def user_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/user_subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::UserSubject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/user_subject.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/user_subject.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta.rb#1
module KubeDSL::DSL::Meta; end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1.rb#1
module KubeDSL::DSL::Meta::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group.rb#7
class KubeDSL::DSL::Meta::V1::APIGroup < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::GroupVersionForDiscovery).void)
    ).returns(KubeDSL::DSL::Meta::V1::GroupVersionForDiscovery)
  end
  def preferred_version(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def preferred_version_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def server_address_by_client_cidr(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Meta::V1::ServerAddressByClientCIDR))
    ).returns(T::Array[KubeDSL::DSL::Meta::V1::ServerAddressByClientCIDR])
  end
  def server_address_by_client_cidrs(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def version(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Meta::V1::GroupVersionForDiscovery))
    ).returns(T::Array[KubeDSL::DSL::Meta::V1::GroupVersionForDiscovery])
  end
  def versions(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group_list.rb#7
class KubeDSL::DSL::Meta::V1::APIGroupList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def group(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Meta::V1::APIGroup))
    ).returns(T::Array[KubeDSL::DSL::Meta::V1::APIGroup])
  end
  def groups(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group_list.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group_list.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource.rb#7
class KubeDSL::DSL::Meta::V1::APIResource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def categories(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def group(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource.rb#45
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def namespaced(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource.rb#30
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def short_names(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def singular_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def storage_version_hash(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def verbs(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def version(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource_list.rb#7
class KubeDSL::DSL::Meta::V1::APIResourceList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def group_version(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def resource(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Meta::V1::APIResource))
    ).returns(T::Array[KubeDSL::DSL::Meta::V1::APIResource])
  end
  def resources(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_versions.rb#7
class KubeDSL::DSL::Meta::V1::APIVersions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_versions.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_versions.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def server_address_by_client_cidr(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Meta::V1::ServerAddressByClientCIDR))
    ).returns(T::Array[KubeDSL::DSL::Meta::V1::ServerAddressByClientCIDR])
  end
  def server_address_by_client_cidrs(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def versions(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/condition.rb#7
class KubeDSL::DSL::Meta::V1::Condition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/condition.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def observed_generation(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/condition.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/delete_options.rb#7
class KubeDSL::DSL::Meta::V1::DeleteOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def dry_run(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def grace_period_seconds(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/delete_options.rb#34
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def orphan_dependents(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::Preconditions).void)
    ).returns(KubeDSL::DSL::Meta::V1::Preconditions)
  end
  def preconditions(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def preconditions_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def propagation_policy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/delete_options.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/group_version_for_discovery.rb#7
class KubeDSL::DSL::Meta::V1::GroupVersionForDiscovery < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def group_version(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/group_version_for_discovery.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/group_version_for_discovery.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def version(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector.rb#7
class KubeDSL::DSL::Meta::V1::LabelSelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def match_expression(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Meta::V1::LabelSelectorRequirement))
    ).returns(T::Array[KubeDSL::DSL::Meta::V1::LabelSelectorRequirement])
  end
  def match_expressions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def match_labels(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector_requirement.rb#7
class KubeDSL::DSL::Meta::V1::LabelSelectorRequirement < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def key(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector_requirement.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def operator(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector_requirement.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def values(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/list_meta.rb#7
class KubeDSL::DSL::Meta::V1::ListMeta < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def continue(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/list_meta.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def remaining_item_count(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def resource_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def self_link(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/list_meta.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/managed_fields_entry.rb#7
class KubeDSL::DSL::Meta::V1::ManagedFieldsEntry < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def fields_type(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def fields_v1(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/managed_fields_entry.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def manager(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def operation(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/managed_fields_entry.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def subresource(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def time(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/object_meta.rb#7
class KubeDSL::DSL::Meta::V1::ObjectMeta < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def annotations(&block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def cluster_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def creation_timestamp(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def deletion_grace_period_seconds(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def deletion_timestamp(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def finalizers(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def generate_name(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def generation(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/object_meta.rb#63
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def labels(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def managed_field(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Meta::V1::ManagedFieldsEntry))
    ).returns(T::Array[KubeDSL::DSL::Meta::V1::ManagedFieldsEntry])
  end
  def managed_fields(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespace(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def owner_reference(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Meta::V1::OwnerReference))
    ).returns(T::Array[KubeDSL::DSL::Meta::V1::OwnerReference])
  end
  def owner_references(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def resource_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def self_link(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/object_meta.rb#42
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def uid(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/owner_reference.rb#7
class KubeDSL::DSL::Meta::V1::OwnerReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_version(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def block_owner_deletion(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def controller(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/owner_reference.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/owner_reference.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def uid(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/preconditions.rb#7
class KubeDSL::DSL::Meta::V1::Preconditions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/preconditions.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def resource_version(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/preconditions.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def uid(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/server_address_by_client_cidr.rb#7
class KubeDSL::DSL::Meta::V1::ServerAddressByClientCIDR < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def client_cidr(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/server_address_by_client_cidr.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/server_address_by_client_cidr.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def server_address(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status.rb#7
class KubeDSL::DSL::Meta::V1::Status < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def code(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::StatusDetails).void)
    ).returns(KubeDSL::DSL::Meta::V1::StatusDetails)
  end
  def details(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def details_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status.rb#35
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_cause.rb#7
class KubeDSL::DSL::Meta::V1::StatusCause < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def field(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_cause.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_cause.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_details.rb#7
class KubeDSL::DSL::Meta::V1::StatusDetails < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def cause(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Meta::V1::StatusCause))
    ).returns(T::Array[KubeDSL::DSL::Meta::V1::StatusCause])
  end
  def causes(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def group(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_details.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def retry_after_seconds(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_details.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def uid(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/watch_event.rb#7
class KubeDSL::DSL::Meta::V1::WatchEvent < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/watch_event.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def object(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/watch_event.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking.rb#1
module KubeDSL::DSL::Networking; end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1.rb#1
module KubeDSL::DSL::Networking::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/http_ingress_path.rb#7
class KubeDSL::DSL::Networking::V1::HTTPIngressPath < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Networking::V1::IngressBackend).void)
    ).returns(KubeDSL::DSL::Networking::V1::IngressBackend)
  end
  def backend(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def backend_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/http_ingress_path.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def path_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/http_ingress_path.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/http_ingress_rule_value.rb#7
class KubeDSL::DSL::Networking::V1::HTTPIngressRuleValue < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/http_ingress_rule_value.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def path(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Networking::V1::HTTPIngressPath))
    ).returns(T::Array[KubeDSL::DSL::Networking::V1::HTTPIngressPath])
  end
  def paths(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/http_ingress_rule_value.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ip_block.rb#7
class KubeDSL::DSL::Networking::V1::IPBlock < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def cidr(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def except(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ip_block.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ip_block.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress.rb#7
class KubeDSL::DSL::Networking::V1::Ingress < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Networking::V1::IngressSpec).void)
    ).returns(KubeDSL::DSL::Networking::V1::IngressSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Networking::V1::IngressStatus).void)
    ).returns(KubeDSL::DSL::Networking::V1::IngressStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_backend.rb#7
class KubeDSL::DSL::Networking::V1::IngressBackend < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_backend.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::TypedLocalObjectReference).void)
    ).returns(KubeDSL::DSL::V1::TypedLocalObjectReference)
  end
  def resource(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_backend.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Networking::V1::IngressServiceBackend).void)
    ).returns(KubeDSL::DSL::Networking::V1::IngressServiceBackend)
  end
  def service(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class.rb#7
class KubeDSL::DSL::Networking::V1::IngressClass < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Networking::V1::IngressClassSpec).void)
    ).returns(KubeDSL::DSL::Networking::V1::IngressClassSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_list.rb#7
class KubeDSL::DSL::Networking::V1::IngressClassList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Networking::V1::IngressClass))
    ).returns(T::Array[KubeDSL::DSL::Networking::V1::IngressClass])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_parameters_reference.rb#7
class KubeDSL::DSL::Networking::V1::IngressClassParametersReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_group(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_parameters_reference.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespace(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def scope(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_parameters_reference.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_spec.rb#7
class KubeDSL::DSL::Networking::V1::IngressClassSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def controller(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Networking::V1::IngressClassParametersReference).void)
    ).returns(KubeDSL::DSL::Networking::V1::IngressClassParametersReference)
  end
  def parameters(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def parameters_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_list.rb#7
class KubeDSL::DSL::Networking::V1::IngressList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Networking::V1::Ingress))
    ).returns(T::Array[KubeDSL::DSL::Networking::V1::Ingress])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_rule.rb#7
class KubeDSL::DSL::Networking::V1::IngressRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def host(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Networking::V1::HTTPIngressRuleValue).void)
    ).returns(KubeDSL::DSL::Networking::V1::HTTPIngressRuleValue)
  end
  def http(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def http_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_service_backend.rb#7
class KubeDSL::DSL::Networking::V1::IngressServiceBackend < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_service_backend.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Networking::V1::ServiceBackendPort).void)
    ).returns(KubeDSL::DSL::Networking::V1::ServiceBackendPort)
  end
  def port(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def port_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_service_backend.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_spec.rb#7
class KubeDSL::DSL::Networking::V1::IngressSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Networking::V1::IngressBackend).void)
    ).returns(KubeDSL::DSL::Networking::V1::IngressBackend)
  end
  def default_backend(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def default_backend_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def ingress_class_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Networking::V1::IngressRule))
    ).returns(T::Array[KubeDSL::DSL::Networking::V1::IngressRule])
  end
  def rules(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def tls(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Networking::V1::IngressTLS))
    ).returns(T::Array[KubeDSL::DSL::Networking::V1::IngressTLS])
  end
  def tlses(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_status.rb#7
class KubeDSL::DSL::Networking::V1::IngressStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_status.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LoadBalancerStatus).void)
    ).returns(KubeDSL::DSL::V1::LoadBalancerStatus)
  end
  def load_balancer(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def load_balancer_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_status.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_tls.rb#7
class KubeDSL::DSL::Networking::V1::IngressTLS < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def hosts(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_tls.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def secret_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_tls.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Networking::V1::NetworkPolicySpec).void)
    ).returns(KubeDSL::DSL::Networking::V1::NetworkPolicySpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_egress_rule.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicyEgressRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_egress_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Networking::V1::NetworkPolicyPort))
    ).returns(T::Array[KubeDSL::DSL::Networking::V1::NetworkPolicyPort])
  end
  def ports(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_egress_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def to(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Networking::V1::NetworkPolicyPeer))
    ).returns(T::Array[KubeDSL::DSL::Networking::V1::NetworkPolicyPeer])
  end
  def tos(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_ingress_rule.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicyIngressRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def from(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Networking::V1::NetworkPolicyPeer))
    ).returns(T::Array[KubeDSL::DSL::Networking::V1::NetworkPolicyPeer])
  end
  def froms(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_ingress_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Networking::V1::NetworkPolicyPort))
    ).returns(T::Array[KubeDSL::DSL::Networking::V1::NetworkPolicyPort])
  end
  def ports(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_ingress_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_list.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicyList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Networking::V1::NetworkPolicy))
    ).returns(T::Array[KubeDSL::DSL::Networking::V1::NetworkPolicy])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_peer.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicyPeer < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Networking::V1::IPBlock).void)
    ).returns(KubeDSL::DSL::Networking::V1::IPBlock)
  end
  def ip_block(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def ip_block_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_peer.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def namespace_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def namespace_selector_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def pod_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pod_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_peer.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_port.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicyPort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def end_port(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_port.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def port(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def protocol(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_port.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_spec.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicySpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def egress(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Networking::V1::NetworkPolicyEgressRule))
    ).returns(T::Array[KubeDSL::DSL::Networking::V1::NetworkPolicyEgressRule])
  end
  def egresses(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def ingress(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Networking::V1::NetworkPolicyIngressRule))
    ).returns(T::Array[KubeDSL::DSL::Networking::V1::NetworkPolicyIngressRule])
  end
  def ingresses(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def pod_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pod_selector_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def policy_types(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/service_backend_port.rb#7
class KubeDSL::DSL::Networking::V1::ServiceBackendPort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/service_backend_port.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def number(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/service_backend_port.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node.rb#1
module KubeDSL::DSL::Node; end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1.rb#1
module KubeDSL::DSL::Node::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1/overhead.rb#7
class KubeDSL::DSL::Node::V1::Overhead < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/overhead.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/overhead.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeSpec).void)).returns(KubeDSL::DSL::V1::NodeSpec) }
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeStatus).void)
    ).returns(KubeDSL::DSL::V1::NodeStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1/runtime_class.rb#7
class KubeDSL::DSL::Node::V1::RuntimeClass < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/runtime_class.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/runtime_class.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeSpec).void)).returns(KubeDSL::DSL::V1::NodeSpec) }
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeStatus).void)
    ).returns(KubeDSL::DSL::V1::NodeStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1/runtime_class_list.rb#7
class KubeDSL::DSL::Node::V1::RuntimeClassList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/runtime_class_list.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/runtime_class_list.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeSpec).void)).returns(KubeDSL::DSL::V1::NodeSpec) }
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeStatus).void)
    ).returns(KubeDSL::DSL::V1::NodeStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1/scheduling.rb#7
class KubeDSL::DSL::Node::V1::Scheduling < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/scheduling.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/scheduling.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeSpec).void)).returns(KubeDSL::DSL::V1::NodeSpec) }
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeStatus).void)
    ).returns(KubeDSL::DSL::V1::NodeStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1.rb#1
module KubeDSL::DSL::Node::V1alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/overhead.rb#7
class KubeDSL::DSL::Node::V1alpha1::Overhead < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/overhead.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def pod_fixed(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/overhead.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class.rb#7
class KubeDSL::DSL::Node::V1alpha1::RuntimeClass < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Node::V1alpha1::RuntimeClassSpec).void)
    ).returns(KubeDSL::DSL::Node::V1alpha1::RuntimeClassSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_list.rb#7
class KubeDSL::DSL::Node::V1alpha1::RuntimeClassList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Node::V1alpha1::RuntimeClass))
    ).returns(T::Array[KubeDSL::DSL::Node::V1alpha1::RuntimeClass])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_spec.rb#7
class KubeDSL::DSL::Node::V1alpha1::RuntimeClassSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_spec.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Node::V1alpha1::Overhead).void)
    ).returns(KubeDSL::DSL::Node::V1alpha1::Overhead)
  end
  def overhead(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def overhead_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def runtime_handler(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Node::V1alpha1::Scheduling).void)
    ).returns(KubeDSL::DSL::Node::V1alpha1::Scheduling)
  end
  def scheduling(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scheduling_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_spec.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/scheduling.rb#7
class KubeDSL::DSL::Node::V1alpha1::Scheduling < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/scheduling.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def node_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/scheduling.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def toleration(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Toleration))
    ).returns(T::Array[KubeDSL::DSL::V1::Toleration])
  end
  def tolerations(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1.rb#1
module KubeDSL::DSL::Node::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/overhead.rb#7
class KubeDSL::DSL::Node::V1beta1::Overhead < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/overhead.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def pod_fixed(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/overhead.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class.rb#7
class KubeDSL::DSL::Node::V1beta1::RuntimeClass < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def handler(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Node::V1beta1::Overhead).void)
    ).returns(KubeDSL::DSL::Node::V1beta1::Overhead)
  end
  def overhead(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def overhead_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Node::V1beta1::Scheduling).void)
    ).returns(KubeDSL::DSL::Node::V1beta1::Scheduling)
  end
  def scheduling(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scheduling_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class_list.rb#7
class KubeDSL::DSL::Node::V1beta1::RuntimeClassList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Node::V1beta1::RuntimeClass))
    ).returns(T::Array[KubeDSL::DSL::Node::V1beta1::RuntimeClass])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/scheduling.rb#7
class KubeDSL::DSL::Node::V1beta1::Scheduling < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/scheduling.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def node_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/scheduling.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def toleration(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Toleration))
    ).returns(T::Array[KubeDSL::DSL::V1::Toleration])
  end
  def tolerations(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/pkg.rb#1
module KubeDSL::DSL::Pkg; end

# source://kube-dsl//lib/kube-dsl/dsl/pkg/version.rb#1
module KubeDSL::DSL::Pkg::Version; end

# source://kube-dsl//lib/kube-dsl/dsl/pkg/version/info.rb#7
class KubeDSL::DSL::Pkg::Version::Info < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def build_date(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def compiler(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def git_commit(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def git_tree_state(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def git_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def go_version(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/pkg/version/info.rb#42
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def major(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def minor(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def platform(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/pkg/version/info.rb#28
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy.rb#1
module KubeDSL::DSL::Policy; end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1.rb#1
module KubeDSL::DSL::Policy::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1/eviction.rb#7
class KubeDSL::DSL::Policy::V1::Eviction < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::DeleteOptions).void)
    ).returns(KubeDSL::DSL::Meta::V1::DeleteOptions)
  end
  def delete_options(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def delete_options_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/eviction.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/eviction.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget.rb#7
class KubeDSL::DSL::Policy::V1::PodDisruptionBudget < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Policy::V1::PodDisruptionBudgetSpec).void)
    ).returns(KubeDSL::DSL::Policy::V1::PodDisruptionBudgetSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Policy::V1::PodDisruptionBudgetStatus).void)
    ).returns(KubeDSL::DSL::Policy::V1::PodDisruptionBudgetStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_list.rb#7
class KubeDSL::DSL::Policy::V1::PodDisruptionBudgetList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Policy::V1::PodDisruptionBudget))
    ).returns(T::Array[KubeDSL::DSL::Policy::V1::PodDisruptionBudget])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_spec.rb#7
class KubeDSL::DSL::Policy::V1::PodDisruptionBudgetSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_spec.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def max_unavailable(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def min_available(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_spec.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_status.rb#7
class KubeDSL::DSL::Policy::V1::PodDisruptionBudgetStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Meta::V1::Condition))
    ).returns(T::Array[KubeDSL::DSL::Meta::V1::Condition])
  end
  def conditions(elem_name = nil, &block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def current_healthy(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def desired_healthy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def disrupted_pods(&block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def disruptions_allowed(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def expected_pods(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_status.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def observed_generation(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_status.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1.rb#1
module KubeDSL::DSL::Policy::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_csi_driver.rb#7
class KubeDSL::DSL::Policy::V1beta1::AllowedCSIDriver < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_csi_driver.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_csi_driver.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_flex_volume.rb#7
class KubeDSL::DSL::Policy::V1beta1::AllowedFlexVolume < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def driver(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_flex_volume.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_flex_volume.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_host_path.rb#7
class KubeDSL::DSL::Policy::V1beta1::AllowedHostPath < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_host_path.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def path_prefix(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_host_path.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/fs_group_strategy_options.rb#7
class KubeDSL::DSL::Policy::V1beta1::FSGroupStrategyOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/fs_group_strategy_options.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def range(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Policy::V1beta1::IDRange))
    ).returns(T::Array[KubeDSL::DSL::Policy::V1beta1::IDRange])
  end
  def ranges(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def rule(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/fs_group_strategy_options.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/host_port_range.rb#7
class KubeDSL::DSL::Policy::V1beta1::HostPortRange < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/host_port_range.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def max(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/host_port_range.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/id_range.rb#7
class KubeDSL::DSL::Policy::V1beta1::IDRange < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/id_range.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def max(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/id_range.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudget < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudgetSpec).void)
    ).returns(KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudgetSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudgetStatus).void)
    ).returns(KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudgetStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_list.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudgetList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudget))
    ).returns(T::Array[KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudget])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_spec.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudgetSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_spec.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def max_unavailable(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def min_available(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_spec.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_status.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudgetStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Meta::V1::Condition))
    ).returns(T::Array[KubeDSL::DSL::Meta::V1::Condition])
  end
  def conditions(elem_name = nil, &block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def current_healthy(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def desired_healthy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def disrupted_pods(&block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def disruptions_allowed(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def expected_pods(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_status.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def observed_generation(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_status.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodSecurityPolicy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Policy::V1beta1::PodSecurityPolicySpec).void)
    ).returns(KubeDSL::DSL::Policy::V1beta1::PodSecurityPolicySpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_list.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodSecurityPolicyList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Policy::V1beta1::PodSecurityPolicy))
    ).returns(T::Array[KubeDSL::DSL::Policy::V1beta1::PodSecurityPolicy])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_spec.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodSecurityPolicySpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def allow_privilege_escalation(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def allowed_capabilities(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def allowed_csi_driver(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Policy::V1beta1::AllowedCSIDriver))
    ).returns(T::Array[KubeDSL::DSL::Policy::V1beta1::AllowedCSIDriver])
  end
  def allowed_csi_drivers(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def allowed_flex_volume(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Policy::V1beta1::AllowedFlexVolume))
    ).returns(T::Array[KubeDSL::DSL::Policy::V1beta1::AllowedFlexVolume])
  end
  def allowed_flex_volumes(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def allowed_host_path(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Policy::V1beta1::AllowedHostPath))
    ).returns(T::Array[KubeDSL::DSL::Policy::V1beta1::AllowedHostPath])
  end
  def allowed_host_paths(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def allowed_proc_mount_types(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def allowed_unsafe_sysctls(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def default_add_capabilities(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def default_allow_privilege_escalation(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def forbidden_sysctls(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Policy::V1beta1::FSGroupStrategyOptions).void)
    ).returns(KubeDSL::DSL::Policy::V1beta1::FSGroupStrategyOptions)
  end
  def fs_group(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def fs_group_present?; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def host_ipc(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def host_network(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def host_pid(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def host_port(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Policy::V1beta1::HostPortRange))
    ).returns(T::Array[KubeDSL::DSL::Policy::V1beta1::HostPortRange])
  end
  def host_ports(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_spec.rb#87
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def privileged(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only_root_filesystem(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def required_drop_capabilities(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Policy::V1beta1::RunAsGroupStrategyOptions).void)
    ).returns(KubeDSL::DSL::Policy::V1beta1::RunAsGroupStrategyOptions)
  end
  def run_as_group(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def run_as_group_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Policy::V1beta1::RunAsUserStrategyOptions).void)
    ).returns(KubeDSL::DSL::Policy::V1beta1::RunAsUserStrategyOptions)
  end
  def run_as_user(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def run_as_user_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Policy::V1beta1::RuntimeClassStrategyOptions).void)
    ).returns(KubeDSL::DSL::Policy::V1beta1::RuntimeClassStrategyOptions)
  end
  def runtime_class(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def runtime_class_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Policy::V1beta1::SELinuxStrategyOptions).void)
    ).returns(KubeDSL::DSL::Policy::V1beta1::SELinuxStrategyOptions)
  end
  def se_linux(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def se_linux_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_spec.rb#58
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Policy::V1beta1::SupplementalGroupsStrategyOptions).void)
    ).returns(KubeDSL::DSL::Policy::V1beta1::SupplementalGroupsStrategyOptions)
  end
  def supplemental_groups(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def supplemental_groups_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def volumes(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_group_strategy_options.rb#7
class KubeDSL::DSL::Policy::V1beta1::RunAsGroupStrategyOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_group_strategy_options.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def range(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Policy::V1beta1::IDRange))
    ).returns(T::Array[KubeDSL::DSL::Policy::V1beta1::IDRange])
  end
  def ranges(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def rule(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_group_strategy_options.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_user_strategy_options.rb#7
class KubeDSL::DSL::Policy::V1beta1::RunAsUserStrategyOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_user_strategy_options.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def range(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Policy::V1beta1::IDRange))
    ).returns(T::Array[KubeDSL::DSL::Policy::V1beta1::IDRange])
  end
  def ranges(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def rule(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_user_strategy_options.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/runtime_class_strategy_options.rb#7
class KubeDSL::DSL::Policy::V1beta1::RuntimeClassStrategyOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def allowed_runtime_class_names(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def default_runtime_class_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/runtime_class_strategy_options.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/runtime_class_strategy_options.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/se_linux_strategy_options.rb#7
class KubeDSL::DSL::Policy::V1beta1::SELinuxStrategyOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/se_linux_strategy_options.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def rule(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SELinuxOptions).void)
    ).returns(KubeDSL::DSL::V1::SELinuxOptions)
  end
  def se_linux_options(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def se_linux_options_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/se_linux_strategy_options.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/supplemental_groups_strategy_options.rb#7
class KubeDSL::DSL::Policy::V1beta1::SupplementalGroupsStrategyOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/supplemental_groups_strategy_options.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def range(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Policy::V1beta1::IDRange))
    ).returns(T::Array[KubeDSL::DSL::Policy::V1beta1::IDRange])
  end
  def ranges(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def rule(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/supplemental_groups_strategy_options.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac.rb#1
module KubeDSL::DSL::Rbac; end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1.rb#1
module KubeDSL::DSL::Rbac::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/aggregation_rule.rb#7
class KubeDSL::DSL::Rbac::V1::AggregationRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def cluster_role_selector(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Meta::V1::LabelSelector))
    ).returns(T::Array[KubeDSL::DSL::Meta::V1::LabelSelector])
  end
  def cluster_role_selectors(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/aggregation_rule.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/aggregation_rule.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role.rb#7
class KubeDSL::DSL::Rbac::V1::ClusterRole < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Rbac::V1::AggregationRule).void)
    ).returns(KubeDSL::DSL::Rbac::V1::AggregationRule)
  end
  def aggregation_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def aggregation_rule_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Rbac::V1::PolicyRule))
    ).returns(T::Array[KubeDSL::DSL::Rbac::V1::PolicyRule])
  end
  def rules(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding.rb#7
class KubeDSL::DSL::Rbac::V1::ClusterRoleBinding < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Rbac::V1::RoleRef).void)
    ).returns(KubeDSL::DSL::Rbac::V1::RoleRef)
  end
  def role_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def role_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def subject(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Rbac::V1::Subject))
    ).returns(T::Array[KubeDSL::DSL::Rbac::V1::Subject])
  end
  def subjects(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding_list.rb#7
class KubeDSL::DSL::Rbac::V1::ClusterRoleBindingList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Rbac::V1::ClusterRoleBinding))
    ).returns(T::Array[KubeDSL::DSL::Rbac::V1::ClusterRoleBinding])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_list.rb#7
class KubeDSL::DSL::Rbac::V1::ClusterRoleList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Rbac::V1::ClusterRole))
    ).returns(T::Array[KubeDSL::DSL::Rbac::V1::ClusterRole])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/policy_rule.rb#7
class KubeDSL::DSL::Rbac::V1::PolicyRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_groups(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/policy_rule.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def non_resource_ur_ls(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def resource_names(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def resources(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/policy_rule.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def verbs(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role.rb#7
class KubeDSL::DSL::Rbac::V1::Role < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Rbac::V1::PolicyRule))
    ).returns(T::Array[KubeDSL::DSL::Rbac::V1::PolicyRule])
  end
  def rules(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding.rb#7
class KubeDSL::DSL::Rbac::V1::RoleBinding < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Rbac::V1::RoleRef).void)
    ).returns(KubeDSL::DSL::Rbac::V1::RoleRef)
  end
  def role_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def role_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def subject(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Rbac::V1::Subject))
    ).returns(T::Array[KubeDSL::DSL::Rbac::V1::Subject])
  end
  def subjects(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding_list.rb#7
class KubeDSL::DSL::Rbac::V1::RoleBindingList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Rbac::V1::RoleBinding))
    ).returns(T::Array[KubeDSL::DSL::Rbac::V1::RoleBinding])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_list.rb#7
class KubeDSL::DSL::Rbac::V1::RoleList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Rbac::V1::Role))
    ).returns(T::Array[KubeDSL::DSL::Rbac::V1::Role])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_ref.rb#7
class KubeDSL::DSL::Rbac::V1::RoleRef < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_group(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_ref.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_ref.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/subject.rb#7
class KubeDSL::DSL::Rbac::V1::Subject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_group(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/subject.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespace(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/subject.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling.rb#1
module KubeDSL::DSL::Scheduling; end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1.rb#1
module KubeDSL::DSL::Scheduling::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class.rb#7
class KubeDSL::DSL::Scheduling::V1::PriorityClass < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def description(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def global_default(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def preemption_policy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class_list.rb#7
class KubeDSL::DSL::Scheduling::V1::PriorityClassList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Scheduling::V1::PriorityClass))
    ).returns(T::Array[KubeDSL::DSL::Scheduling::V1::PriorityClass])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage.rb#1
module KubeDSL::DSL::Storage; end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1.rb#1
module KubeDSL::DSL::Storage::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver.rb#7
class KubeDSL::DSL::Storage::V1::CSIDriver < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Storage::V1::CSIDriverSpec).void)
    ).returns(KubeDSL::DSL::Storage::V1::CSIDriverSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver_list.rb#7
class KubeDSL::DSL::Storage::V1::CSIDriverList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Storage::V1::CSIDriver))
    ).returns(T::Array[KubeDSL::DSL::Storage::V1::CSIDriver])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver_spec.rb#7
class KubeDSL::DSL::Storage::V1::CSIDriverSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def attach_required(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_group_policy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver_spec.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def pod_info_on_mount(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def requires_republish(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver_spec.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def storage_capacity(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def token_request(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Storage::V1::TokenRequest))
    ).returns(T::Array[KubeDSL::DSL::Storage::V1::TokenRequest])
  end
  def token_requests(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_lifecycle_modes(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node.rb#7
class KubeDSL::DSL::Storage::V1::CSINode < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Storage::V1::CSINodeSpec).void)
    ).returns(KubeDSL::DSL::Storage::V1::CSINodeSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_driver.rb#7
class KubeDSL::DSL::Storage::V1::CSINodeDriver < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Storage::V1::VolumeNodeResources).void)
    ).returns(KubeDSL::DSL::Storage::V1::VolumeNodeResources)
  end
  def allocatable(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def allocatable_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_driver.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def node_id(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_driver.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def topology_keys(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_list.rb#7
class KubeDSL::DSL::Storage::V1::CSINodeList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Storage::V1::CSINode))
    ).returns(T::Array[KubeDSL::DSL::Storage::V1::CSINode])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_spec.rb#7
class KubeDSL::DSL::Storage::V1::CSINodeSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def driver(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Storage::V1::CSINodeDriver))
    ).returns(T::Array[KubeDSL::DSL::Storage::V1::CSINodeDriver])
  end
  def drivers(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_spec.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_spec.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class.rb#7
class KubeDSL::DSL::Storage::V1::StorageClass < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def allow_volume_expansion(val = nil); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::TopologySelectorTerm))
    ).returns(T::Array[KubeDSL::DSL::V1::TopologySelectorTerm])
  end
  def allowed_topologies(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def allowed_topology(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class.rb#41
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def mount_options(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def parameters(&block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def provisioner(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reclaim_policy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class.rb#26
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_binding_mode(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class_list.rb#7
class KubeDSL::DSL::Storage::V1::StorageClassList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Storage::V1::StorageClass))
    ).returns(T::Array[KubeDSL::DSL::Storage::V1::StorageClass])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/token_request.rb#7
class KubeDSL::DSL::Storage::V1::TokenRequest < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def audience(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def expiration_seconds(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/token_request.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/token_request.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment.rb#7
class KubeDSL::DSL::Storage::V1::VolumeAttachment < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Storage::V1::VolumeAttachmentSpec).void)
    ).returns(KubeDSL::DSL::Storage::V1::VolumeAttachmentSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Storage::V1::VolumeAttachmentStatus).void)
    ).returns(KubeDSL::DSL::Storage::V1::VolumeAttachmentStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_list.rb#7
class KubeDSL::DSL::Storage::V1::VolumeAttachmentList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Storage::V1::VolumeAttachment))
    ).returns(T::Array[KubeDSL::DSL::Storage::V1::VolumeAttachment])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_source.rb#7
class KubeDSL::DSL::Storage::V1::VolumeAttachmentSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PersistentVolumeSpec).void)
    ).returns(KubeDSL::DSL::V1::PersistentVolumeSpec)
  end
  def inline_volume_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def inline_volume_spec_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def persistent_volume_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_spec.rb#7
class KubeDSL::DSL::Storage::V1::VolumeAttachmentSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def attacher(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_spec.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def node_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_spec.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Storage::V1::VolumeAttachmentSource).void)
    ).returns(KubeDSL::DSL::Storage::V1::VolumeAttachmentSource)
  end
  def source(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def source_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_status.rb#7
class KubeDSL::DSL::Storage::V1::VolumeAttachmentStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Storage::V1::VolumeError).void)
    ).returns(KubeDSL::DSL::Storage::V1::VolumeError)
  end
  def attach_error(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def attach_error_present?; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def attached(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def attachment_metadata(&block); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Storage::V1::VolumeError).void)
    ).returns(KubeDSL::DSL::Storage::V1::VolumeError)
  end
  def detach_error(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def detach_error_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_status.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_status.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_error.rb#7
class KubeDSL::DSL::Storage::V1::VolumeError < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_error.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_error.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def time(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_node_resources.rb#7
class KubeDSL::DSL::Storage::V1::VolumeNodeResources < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def count(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_node_resources.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_node_resources.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1.rb#1
module KubeDSL::DSL::Storage::V1alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/csi_storage_capacity.rb#7
class KubeDSL::DSL::Storage::V1alpha1::CSIStorageCapacity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def capacity(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/csi_storage_capacity.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def maximum_volume_size(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def node_topology(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_topology_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/csi_storage_capacity.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def storage_class_name(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/csi_storage_capacity_list.rb#7
class KubeDSL::DSL::Storage::V1alpha1::CSIStorageCapacityList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Storage::V1alpha1::CSIStorageCapacity))
    ).returns(T::Array[KubeDSL::DSL::Storage::V1alpha1::CSIStorageCapacity])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/csi_storage_capacity_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/csi_storage_capacity_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1.rb#1
module KubeDSL::DSL::Storage::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_storage_capacity.rb#7
class KubeDSL::DSL::Storage::V1beta1::CSIStorageCapacity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def capacity(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_storage_capacity.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def maximum_volume_size(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def node_topology(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_topology_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_storage_capacity.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def storage_class_name(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_storage_capacity_list.rb#7
class KubeDSL::DSL::Storage::V1beta1::CSIStorageCapacityList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Storage::V1beta1::CSIStorageCapacity))
    ).returns(T::Array[KubeDSL::DSL::Storage::V1beta1::CSIStorageCapacity])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_storage_capacity_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_storage_capacity_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1.rb#1
module KubeDSL::DSL::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/v1/aws_elastic_block_store_volume_source.rb#6
class KubeDSL::DSL::V1::AWSElasticBlockStoreVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/aws_elastic_block_store_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def partition(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/aws_elastic_block_store_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_id(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/affinity.rb#6
class KubeDSL::DSL::V1::Affinity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/affinity.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeAffinity).void)
    ).returns(KubeDSL::DSL::V1::NodeAffinity)
  end
  def node_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_affinity_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodAffinity).void)
    ).returns(KubeDSL::DSL::V1::PodAffinity)
  end
  def pod_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pod_affinity_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodAntiAffinity).void)
    ).returns(KubeDSL::DSL::V1::PodAntiAffinity)
  end
  def pod_anti_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pod_anti_affinity_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/affinity.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/attached_volume.rb#6
class KubeDSL::DSL::V1::AttachedVolume < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def device_path(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/attached_volume.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/attached_volume.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/azure_disk_volume_source.rb#6
class KubeDSL::DSL::V1::AzureDiskVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def caching_mode(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def disk_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def disk_uri(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_disk_volume_source.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_disk_volume_source.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::AzureFilePersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_persistent_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def secret_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def secret_namespace(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_persistent_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def share_name(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_volume_source.rb#6
class KubeDSL::DSL::V1::AzureFileVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_volume_source.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def secret_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_volume_source.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def share_name(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/binding.rb#6
class KubeDSL::DSL::V1::Binding < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/binding.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/binding.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectReference).void)
    ).returns(KubeDSL::DSL::V1::ObjectReference)
  end
  def target(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/csi_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::CSIPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretReference).void)
    ).returns(KubeDSL::DSL::V1::SecretReference)
  end
  def controller_expand_secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def controller_expand_secret_ref_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretReference).void)
    ).returns(KubeDSL::DSL::V1::SecretReference)
  end
  def controller_publish_secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def controller_publish_secret_ref_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def driver(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/csi_persistent_volume_source.rb#41
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretReference).void)
    ).returns(KubeDSL::DSL::V1::SecretReference)
  end
  def node_publish_secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_publish_secret_ref_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretReference).void)
    ).returns(KubeDSL::DSL::V1::SecretReference)
  end
  def node_stage_secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_stage_secret_ref_present?; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/csi_persistent_volume_source.rb#27
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def volume_attributes(&block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_handle(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/csi_volume_source.rb#6
class KubeDSL::DSL::V1::CSIVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def driver(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/csi_volume_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LocalObjectReference).void)
    ).returns(KubeDSL::DSL::V1::LocalObjectReference)
  end
  def node_publish_secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_publish_secret_ref_present?; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/csi_volume_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def volume_attributes(&block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/capabilities.rb#6
class KubeDSL::DSL::V1::Capabilities < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def add(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def drop(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/capabilities.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/capabilities.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::CephFSPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_persistent_volume_source.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def monitors(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def secret_file(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretReference).void)
    ).returns(KubeDSL::DSL::V1::SecretReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_persistent_volume_source.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def user(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_volume_source.rb#6
class KubeDSL::DSL::V1::CephFSVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_volume_source.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def monitors(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def secret_file(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LocalObjectReference).void)
    ).returns(KubeDSL::DSL::V1::LocalObjectReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_volume_source.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def user(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::CinderPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_persistent_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretReference).void)
    ).returns(KubeDSL::DSL::V1::SecretReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_persistent_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_id(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_volume_source.rb#6
class KubeDSL::DSL::V1::CinderVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LocalObjectReference).void)
    ).returns(KubeDSL::DSL::V1::LocalObjectReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_id(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/client_ip_config.rb#6
class KubeDSL::DSL::V1::ClientIPConfig < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/client_ip_config.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/client_ip_config.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def timeout_seconds(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/component_condition.rb#6
class KubeDSL::DSL::V1::ComponentCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def error(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_condition.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_condition.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/component_status.rb#6
class KubeDSL::DSL::V1::ComponentStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ComponentCondition))
    ).returns(T::Array[KubeDSL::DSL::V1::ComponentCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_status.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_status.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/component_status_list.rb#6
class KubeDSL::DSL::V1::ComponentStatusList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ComponentStatus))
    ).returns(T::Array[KubeDSL::DSL::V1::ComponentStatus])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_status_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_status_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map.rb#6
class KubeDSL::DSL::V1::ConfigMap < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def binary_data(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def data(&block); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def immutable(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map.rb#28
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_env_source.rb#6
class KubeDSL::DSL::V1::ConfigMapEnvSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_env_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def optional(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_env_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_key_selector.rb#6
class KubeDSL::DSL::V1::ConfigMapKeySelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def key(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_key_selector.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def optional(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_key_selector.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_list.rb#6
class KubeDSL::DSL::V1::ConfigMapList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ConfigMap))
    ).returns(T::Array[KubeDSL::DSL::V1::ConfigMap])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_node_config_source.rb#6
class KubeDSL::DSL::V1::ConfigMapNodeConfigSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_node_config_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def kubelet_config_key(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespace(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def resource_version(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_node_config_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def uid(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_projection.rb#6
class KubeDSL::DSL::V1::ConfigMapProjection < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::KeyToPath))
    ).returns(T::Array[KubeDSL::DSL::V1::KeyToPath])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_projection.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def optional(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_projection.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_volume_source.rb#6
class KubeDSL::DSL::V1::ConfigMapVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def default_mode(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::KeyToPath))
    ).returns(T::Array[KubeDSL::DSL::V1::KeyToPath])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def optional(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container.rb#6
class KubeDSL::DSL::V1::Container < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def args(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def command(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def env(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def env_from(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::EnvFromSource))
    ).returns(T::Array[KubeDSL::DSL::V1::EnvFromSource])
  end
  def env_froms(elem_name = nil, &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::EnvVar))
    ).returns(T::Array[KubeDSL::DSL::V1::EnvVar])
  end
  def envs(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def image(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def image_pull_policy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container.rb#80
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::Lifecycle).void)).returns(KubeDSL::DSL::V1::Lifecycle) }
  def lifecycle(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def lifecycle_present?; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::Probe).void)).returns(KubeDSL::DSL::V1::Probe) }
  def liveness_probe(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def liveness_probe_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ContainerPort))
    ).returns(T::Array[KubeDSL::DSL::V1::ContainerPort])
  end
  def ports(elem_name = nil, &block); end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::Probe).void)).returns(KubeDSL::DSL::V1::Probe) }
  def readiness_probe(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def readiness_probe_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ResourceRequirements).void)
    ).returns(KubeDSL::DSL::V1::ResourceRequirements)
  end
  def resources(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resources_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecurityContext).void)
    ).returns(KubeDSL::DSL::V1::SecurityContext)
  end
  def security_context(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def security_context_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container.rb#53
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::Probe).void)).returns(KubeDSL::DSL::V1::Probe) }
  def startup_probe(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def startup_probe_present?; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def stdin(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def stdin_once(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def termination_message_path(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def termination_message_policy(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def tty(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volume_device(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::VolumeDevice))
    ).returns(T::Array[KubeDSL::DSL::V1::VolumeDevice])
  end
  def volume_devices(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volume_mount(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::VolumeMount))
    ).returns(T::Array[KubeDSL::DSL::V1::VolumeMount])
  end
  def volume_mounts(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def working_dir(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_image.rb#6
class KubeDSL::DSL::V1::ContainerImage < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_image.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def names(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_image.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def size_bytes(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_port.rb#6
class KubeDSL::DSL::V1::ContainerPort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def container_port(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def host_ip(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def host_port(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_port.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def protocol(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_port.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_state.rb#6
class KubeDSL::DSL::V1::ContainerState < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ContainerStateRunning).void)
    ).returns(KubeDSL::DSL::V1::ContainerStateRunning)
  end
  def running(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def running_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ContainerStateTerminated).void)
    ).returns(KubeDSL::DSL::V1::ContainerStateTerminated)
  end
  def terminated(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def terminated_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ContainerStateWaiting).void)
    ).returns(KubeDSL::DSL::V1::ContainerStateWaiting)
  end
  def waiting(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def waiting_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_running.rb#6
class KubeDSL::DSL::V1::ContainerStateRunning < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_running.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_running.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def started_at(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_terminated.rb#6
class KubeDSL::DSL::V1::ContainerStateTerminated < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def container_id(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def exit_code(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def finished_at(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_terminated.rb#35
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_terminated.rb#23
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def signal(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def started_at(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_waiting.rb#6
class KubeDSL::DSL::V1::ContainerStateWaiting < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_waiting.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_waiting.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_status.rb#6
class KubeDSL::DSL::V1::ContainerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def container_id(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def image(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def image_id(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_status.rb#41
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ContainerState).void)
    ).returns(KubeDSL::DSL::V1::ContainerState)
  end
  def last_state(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def last_state_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def ready(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def restart_count(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_status.rb#27
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def started(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ContainerState).void)
    ).returns(KubeDSL::DSL::V1::ContainerState)
  end
  def state(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def state_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/daemon_endpoint.rb#6
class KubeDSL::DSL::V1::DaemonEndpoint < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/daemon_endpoint.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def port(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/daemon_endpoint.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_projection.rb#6
class KubeDSL::DSL::V1::DownwardAPIProjection < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::DownwardAPIVolumeFile))
    ).returns(T::Array[KubeDSL::DSL::V1::DownwardAPIVolumeFile])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_projection.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_projection.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_file.rb#6
class KubeDSL::DSL::V1::DownwardAPIVolumeFile < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectFieldSelector).void)
    ).returns(KubeDSL::DSL::V1::ObjectFieldSelector)
  end
  def field_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def field_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_file.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def mode(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ResourceFieldSelector).void)
    ).returns(KubeDSL::DSL::V1::ResourceFieldSelector)
  end
  def resource_field_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_field_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_file.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_source.rb#6
class KubeDSL::DSL::V1::DownwardAPIVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def default_mode(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::DownwardAPIVolumeFile))
    ).returns(T::Array[KubeDSL::DSL::V1::DownwardAPIVolumeFile])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/empty_dir_volume_source.rb#6
class KubeDSL::DSL::V1::EmptyDirVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/empty_dir_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def medium(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/empty_dir_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def size_limit(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_address.rb#6
class KubeDSL::DSL::V1::EndpointAddress < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def hostname(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def ip(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_address.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def node_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_address.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectReference).void)
    ).returns(KubeDSL::DSL::V1::ObjectReference)
  end
  def target_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_ref_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_port.rb#6
class KubeDSL::DSL::V1::EndpointPort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def app_protocol(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_port.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def port(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def protocol(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_port.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_subset.rb#6
class KubeDSL::DSL::V1::EndpointSubset < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def address(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::EndpointAddress))
    ).returns(T::Array[KubeDSL::DSL::V1::EndpointAddress])
  end
  def addresses(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_subset.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def not_ready_address(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::EndpointAddress))
    ).returns(T::Array[KubeDSL::DSL::V1::EndpointAddress])
  end
  def not_ready_addresses(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::EndpointPort))
    ).returns(T::Array[KubeDSL::DSL::V1::EndpointPort])
  end
  def ports(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_subset.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints.rb#6
class KubeDSL::DSL::V1::Endpoints < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def subset(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::EndpointSubset))
    ).returns(T::Array[KubeDSL::DSL::V1::EndpointSubset])
  end
  def subsets(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints_list.rb#6
class KubeDSL::DSL::V1::EndpointsList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Endpoints))
    ).returns(T::Array[KubeDSL::DSL::V1::Endpoints])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/env_from_source.rb#6
class KubeDSL::DSL::V1::EnvFromSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ConfigMapEnvSource).void)
    ).returns(KubeDSL::DSL::V1::ConfigMapEnvSource)
  end
  def config_map_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_map_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_from_source.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def prefix(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretEnvSource).void)
    ).returns(KubeDSL::DSL::V1::SecretEnvSource)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_from_source.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/env_var.rb#6
class KubeDSL::DSL::V1::EnvVar < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_var.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_var.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def value(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::EnvVarSource).void)
    ).returns(KubeDSL::DSL::V1::EnvVarSource)
  end
  def value_from(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def value_from_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/env_var_source.rb#6
class KubeDSL::DSL::V1::EnvVarSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ConfigMapKeySelector).void)
    ).returns(KubeDSL::DSL::V1::ConfigMapKeySelector)
  end
  def config_map_key_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_map_key_ref_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectFieldSelector).void)
    ).returns(KubeDSL::DSL::V1::ObjectFieldSelector)
  end
  def field_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def field_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_var_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ResourceFieldSelector).void)
    ).returns(KubeDSL::DSL::V1::ResourceFieldSelector)
  end
  def resource_field_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_field_ref_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretKeySelector).void)
    ).returns(KubeDSL::DSL::V1::SecretKeySelector)
  end
  def secret_key_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_key_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_var_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_container.rb#6
class KubeDSL::DSL::V1::EphemeralContainer < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def args(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def command(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def env(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def env_from(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::EnvFromSource))
    ).returns(T::Array[KubeDSL::DSL::V1::EnvFromSource])
  end
  def env_froms(elem_name = nil, &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::EnvVar))
    ).returns(T::Array[KubeDSL::DSL::V1::EnvVar])
  end
  def envs(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def image(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def image_pull_policy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_container.rb#83
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::Lifecycle).void)).returns(KubeDSL::DSL::V1::Lifecycle) }
  def lifecycle(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def lifecycle_present?; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::Probe).void)).returns(KubeDSL::DSL::V1::Probe) }
  def liveness_probe(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def liveness_probe_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ContainerPort))
    ).returns(T::Array[KubeDSL::DSL::V1::ContainerPort])
  end
  def ports(elem_name = nil, &block); end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::Probe).void)).returns(KubeDSL::DSL::V1::Probe) }
  def readiness_probe(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def readiness_probe_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ResourceRequirements).void)
    ).returns(KubeDSL::DSL::V1::ResourceRequirements)
  end
  def resources(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resources_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecurityContext).void)
    ).returns(KubeDSL::DSL::V1::SecurityContext)
  end
  def security_context(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def security_context_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_container.rb#55
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::Probe).void)).returns(KubeDSL::DSL::V1::Probe) }
  def startup_probe(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def startup_probe_present?; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def stdin(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def stdin_once(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def target_container_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def termination_message_path(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def termination_message_policy(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def tty(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volume_device(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::VolumeDevice))
    ).returns(T::Array[KubeDSL::DSL::V1::VolumeDevice])
  end
  def volume_devices(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volume_mount(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::VolumeMount))
    ).returns(T::Array[KubeDSL::DSL::V1::VolumeMount])
  end
  def volume_mounts(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def working_dir(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_volume_source.rb#6
class KubeDSL::DSL::V1::EphemeralVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_volume_source.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_volume_source.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PersistentVolumeClaimTemplate).void)
    ).returns(KubeDSL::DSL::V1::PersistentVolumeClaimTemplate)
  end
  def volume_claim_template(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def volume_claim_template_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/event.rb#6
class KubeDSL::DSL::V1::Event < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def action(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def count(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def event_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def first_timestamp(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectReference).void)
    ).returns(KubeDSL::DSL::V1::ObjectReference)
  end
  def involved_object(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def involved_object_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event.rb#61
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_timestamp(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectReference).void)
    ).returns(KubeDSL::DSL::V1::ObjectReference)
  end
  def related(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def related_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def reporting_component(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reporting_instance(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event.rb#39
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::EventSeries).void)
    ).returns(KubeDSL::DSL::V1::EventSeries)
  end
  def series(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def series_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::EventSource).void)
    ).returns(KubeDSL::DSL::V1::EventSource)
  end
  def source(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def source_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/event_list.rb#6
class KubeDSL::DSL::V1::EventList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Event))
    ).returns(T::Array[KubeDSL::DSL::V1::Event])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/event_series.rb#6
class KubeDSL::DSL::V1::EventSeries < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def count(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_series.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_observed_time(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_series.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/event_source.rb#6
class KubeDSL::DSL::V1::EventSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def component(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def host(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/exec_action.rb#6
class KubeDSL::DSL::V1::ExecAction < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def command(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/exec_action.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/exec_action.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/fc_volume_source.rb#6
class KubeDSL::DSL::V1::FCVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/fc_volume_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def lun(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/fc_volume_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def target_ww_ns(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def wwids(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/flex_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::FlexPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def driver(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flex_persistent_volume_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def options(&block); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretReference).void)
    ).returns(KubeDSL::DSL::V1::SecretReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flex_persistent_volume_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/flex_volume_source.rb#6
class KubeDSL::DSL::V1::FlexVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def driver(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flex_volume_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def options(&block); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LocalObjectReference).void)
    ).returns(KubeDSL::DSL::V1::LocalObjectReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flex_volume_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/flocker_volume_source.rb#6
class KubeDSL::DSL::V1::FlockerVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def dataset_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def dataset_uuid(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flocker_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flocker_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/gce_persistent_disk_volume_source.rb#6
class KubeDSL::DSL::V1::GCEPersistentDiskVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/gce_persistent_disk_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def partition(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def pd_name(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/gce_persistent_disk_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/grpc_action.rb#6
class KubeDSL::DSL::V1::GRPCAction < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/grpc_action.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def port(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/grpc_action.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def service(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/git_repo_volume_source.rb#6
class KubeDSL::DSL::V1::GitRepoVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def directory(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/git_repo_volume_source.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def repository(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def revision(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/git_repo_volume_source.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::GlusterfsPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def endpoints(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def endpoints_namespace(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_persistent_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_persistent_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_volume_source.rb#6
class KubeDSL::DSL::V1::GlusterfsVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def endpoints(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_volume_source.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_volume_source.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/http_get_action.rb#6
class KubeDSL::DSL::V1::HTTPGetAction < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def host(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def http_header(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::HTTPHeader))
    ).returns(T::Array[KubeDSL::DSL::V1::HTTPHeader])
  end
  def http_headers(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/http_get_action.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def port(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def scheme(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/http_get_action.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/http_header.rb#6
class KubeDSL::DSL::V1::HTTPHeader < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/http_header.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/http_header.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/host_alias.rb#6
class KubeDSL::DSL::V1::HostAlias < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def hostnames(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def ip(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/host_alias.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/host_alias.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/host_path_volume_source.rb#6
class KubeDSL::DSL::V1::HostPathVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/host_path_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/host_path_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::ISCSIPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def chap_auth_discovery(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def chap_auth_session(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def initiator_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def iqn(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def iscsi_interface(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_persistent_volume_source.rb#47
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def lun(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def portals(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretReference).void)
    ).returns(KubeDSL::DSL::V1::SecretReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_persistent_volume_source.rb#31
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def target_portal(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_volume_source.rb#6
class KubeDSL::DSL::V1::ISCSIVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def chap_auth_discovery(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def chap_auth_session(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def initiator_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def iqn(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def iscsi_interface(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_volume_source.rb#47
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def lun(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def portals(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LocalObjectReference).void)
    ).returns(KubeDSL::DSL::V1::LocalObjectReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_volume_source.rb#31
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def target_portal(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/key_to_path.rb#6
class KubeDSL::DSL::V1::KeyToPath < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def key(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/key_to_path.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def mode(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/key_to_path.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle.rb#6
class KubeDSL::DSL::V1::Lifecycle < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LifecycleHandler).void)
    ).returns(KubeDSL::DSL::V1::LifecycleHandler)
  end
  def post_start(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def post_start_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LifecycleHandler).void)
    ).returns(KubeDSL::DSL::V1::LifecycleHandler)
  end
  def pre_stop(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pre_stop_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle_handler.rb#6
class KubeDSL::DSL::V1::LifecycleHandler < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ExecAction).void)
    ).returns(KubeDSL::DSL::V1::ExecAction)
  end
  def exec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def exec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::HTTPGetAction).void)
    ).returns(KubeDSL::DSL::V1::HTTPGetAction)
  end
  def http_get(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def http_get_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle_handler.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle_handler.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::TCPSocketAction).void)
    ).returns(KubeDSL::DSL::V1::TCPSocketAction)
  end
  def tcp_socket(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def tcp_socket_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range.rb#6
class KubeDSL::DSL::V1::LimitRange < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LimitRangeSpec).void)
    ).returns(KubeDSL::DSL::V1::LimitRangeSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_item.rb#6
class KubeDSL::DSL::V1::LimitRangeItem < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def default(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def default_request(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_item.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def max(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def max_limit_request_ratio(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def min(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_item.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_list.rb#6
class KubeDSL::DSL::V1::LimitRangeList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::LimitRange))
    ).returns(T::Array[KubeDSL::DSL::V1::LimitRange])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_spec.rb#6
class KubeDSL::DSL::V1::LimitRangeSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_spec.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def limit(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::LimitRangeItem))
    ).returns(T::Array[KubeDSL::DSL::V1::LimitRangeItem])
  end
  def limits(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_spec.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_ingress.rb#6
class KubeDSL::DSL::V1::LoadBalancerIngress < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def hostname(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def ip(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_ingress.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::PortStatus))
    ).returns(T::Array[KubeDSL::DSL::V1::PortStatus])
  end
  def ports(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_ingress.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_status.rb#6
class KubeDSL::DSL::V1::LoadBalancerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def ingress(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::LoadBalancerIngress))
    ).returns(T::Array[KubeDSL::DSL::V1::LoadBalancerIngress])
  end
  def ingresses(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_status.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_status.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/local_object_reference.rb#6
class KubeDSL::DSL::V1::LocalObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/local_object_reference.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/local_object_reference.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/local_volume_source.rb#6
class KubeDSL::DSL::V1::LocalVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/local_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/local_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/nfs_volume_source.rb#6
class KubeDSL::DSL::V1::NFSVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/nfs_volume_source.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/nfs_volume_source.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def server(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace.rb#6
class KubeDSL::DSL::V1::Namespace < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NamespaceSpec).void)
    ).returns(KubeDSL::DSL::V1::NamespaceSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NamespaceStatus).void)
    ).returns(KubeDSL::DSL::V1::NamespaceStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_condition.rb#6
class KubeDSL::DSL::V1::NamespaceCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_condition.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_condition.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_list.rb#6
class KubeDSL::DSL::V1::NamespaceList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Namespace))
    ).returns(T::Array[KubeDSL::DSL::V1::Namespace])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_spec.rb#6
class KubeDSL::DSL::V1::NamespaceSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def finalizers(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_spec.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_spec.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_status.rb#6
class KubeDSL::DSL::V1::NamespaceStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::NamespaceCondition))
    ).returns(T::Array[KubeDSL::DSL::V1::NamespaceCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_status.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def phase(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_status.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node.rb#6
class KubeDSL::DSL::V1::Node < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeSpec).void)).returns(KubeDSL::DSL::V1::NodeSpec) }
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeStatus).void)
    ).returns(KubeDSL::DSL::V1::NodeStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_address.rb#6
class KubeDSL::DSL::V1::NodeAddress < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def address(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_address.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_address.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_affinity.rb#6
class KubeDSL::DSL::V1::NodeAffinity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_affinity.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def preferred_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::PreferredSchedulingTerm))
    ).returns(T::Array[KubeDSL::DSL::V1::PreferredSchedulingTerm])
  end
  def preferred_during_scheduling_ignored_during_executions(elem_name = nil, &block); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeSelector).void)
    ).returns(KubeDSL::DSL::V1::NodeSelector)
  end
  def required_during_scheduling_ignored_during_execution(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def required_during_scheduling_ignored_during_execution_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_affinity.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_condition.rb#6
class KubeDSL::DSL::V1::NodeCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_condition.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_heartbeat_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_condition.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_source.rb#6
class KubeDSL::DSL::V1::NodeConfigSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ConfigMapNodeConfigSource).void)
    ).returns(KubeDSL::DSL::V1::ConfigMapNodeConfigSource)
  end
  def config_map(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_map_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_source.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_source.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_status.rb#6
class KubeDSL::DSL::V1::NodeConfigStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeConfigSource).void)
    ).returns(KubeDSL::DSL::V1::NodeConfigSource)
  end
  def active(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def active_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeConfigSource).void)
    ).returns(KubeDSL::DSL::V1::NodeConfigSource)
  end
  def assigned(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def assigned_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def error(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_status.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeConfigSource).void)
    ).returns(KubeDSL::DSL::V1::NodeConfigSource)
  end
  def last_known_good(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def last_known_good_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_status.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_daemon_endpoints.rb#6
class KubeDSL::DSL::V1::NodeDaemonEndpoints < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_daemon_endpoints.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::DaemonEndpoint).void)
    ).returns(KubeDSL::DSL::V1::DaemonEndpoint)
  end
  def kubelet_endpoint(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def kubelet_endpoint_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_daemon_endpoints.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_list.rb#6
class KubeDSL::DSL::V1::NodeList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Node))
    ).returns(T::Array[KubeDSL::DSL::V1::Node])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector.rb#6
class KubeDSL::DSL::V1::NodeSelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def node_selector_term(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::NodeSelectorTerm))
    ).returns(T::Array[KubeDSL::DSL::V1::NodeSelectorTerm])
  end
  def node_selector_terms(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_requirement.rb#6
class KubeDSL::DSL::V1::NodeSelectorRequirement < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def key(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_requirement.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def operator(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_requirement.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def values(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_term.rb#6
class KubeDSL::DSL::V1::NodeSelectorTerm < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_term.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def match_expression(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::NodeSelectorRequirement))
    ).returns(T::Array[KubeDSL::DSL::V1::NodeSelectorRequirement])
  end
  def match_expressions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def match_field(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::NodeSelectorRequirement))
    ).returns(T::Array[KubeDSL::DSL::V1::NodeSelectorRequirement])
  end
  def match_fields(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_term.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_spec.rb#6
class KubeDSL::DSL::V1::NodeSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeConfigSource).void)
    ).returns(KubeDSL::DSL::V1::NodeConfigSource)
  end
  def config_source(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_source_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def external_id(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_spec.rb#35
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def pod_cid_rs(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def pod_cidr(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def provider_id(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_spec.rb#23
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def taint(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Taint))
    ).returns(T::Array[KubeDSL::DSL::V1::Taint])
  end
  def taints(elem_name = nil, &block); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def unschedulable(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_status.rb#6
class KubeDSL::DSL::V1::NodeStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def address(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::NodeAddress))
    ).returns(T::Array[KubeDSL::DSL::V1::NodeAddress])
  end
  def addresses(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def allocatable(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def capacity(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::NodeCondition))
    ).returns(T::Array[KubeDSL::DSL::V1::NodeCondition])
  end
  def conditions(elem_name = nil, &block); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeConfigStatus).void)
    ).returns(KubeDSL::DSL::V1::NodeConfigStatus)
  end
  def config(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeDaemonEndpoints).void)
    ).returns(KubeDSL::DSL::V1::NodeDaemonEndpoints)
  end
  def daemon_endpoints(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def daemon_endpoints_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def image(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ContainerImage))
    ).returns(T::Array[KubeDSL::DSL::V1::ContainerImage])
  end
  def images(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_status.rb#47
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeSystemInfo).void)
    ).returns(KubeDSL::DSL::V1::NodeSystemInfo)
  end
  def node_info(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_info_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def phase(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_status.rb#31
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volumes_attached(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::AttachedVolume))
    ).returns(T::Array[KubeDSL::DSL::V1::AttachedVolume])
  end
  def volumes_attacheds(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def volumes_in_use(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_system_info.rb#6
class KubeDSL::DSL::V1::NodeSystemInfo < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def architecture(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def boot_id(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def container_runtime_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kernel_version(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_system_info.rb#44
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def kube_proxy_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kubelet_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def machine_id(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def operating_system(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def os_image(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_system_info.rb#29
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def system_uuid(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/object_field_selector.rb#6
class KubeDSL::DSL::V1::ObjectFieldSelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def field_path(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/object_field_selector.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/object_field_selector.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/object_reference.rb#6
class KubeDSL::DSL::V1::ObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_version(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def field_path(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/object_reference.rb#35
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespace(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def resource_version(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/object_reference.rb#23
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def uid(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume.rb#6
class KubeDSL::DSL::V1::PersistentVolume < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PersistentVolumeSpec).void)
    ).returns(KubeDSL::DSL::V1::PersistentVolumeSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PersistentVolumeStatus).void)
    ).returns(KubeDSL::DSL::V1::PersistentVolumeStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaim < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PersistentVolumeClaimSpec).void)
    ).returns(KubeDSL::DSL::V1::PersistentVolumeClaimSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PersistentVolumeClaimStatus).void)
    ).returns(KubeDSL::DSL::V1::PersistentVolumeClaimStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_condition.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaimCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_condition.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_probe_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_condition.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_list.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaimList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::PersistentVolumeClaim))
    ).returns(T::Array[KubeDSL::DSL::V1::PersistentVolumeClaim])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_spec.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaimSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def access_modes(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::TypedLocalObjectReference).void)
    ).returns(KubeDSL::DSL::V1::TypedLocalObjectReference)
  end
  def data_source(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def data_source_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::TypedLocalObjectReference).void)
    ).returns(KubeDSL::DSL::V1::TypedLocalObjectReference)
  end
  def data_source_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def data_source_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_spec.rb#38
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ResourceRequirements).void)
    ).returns(KubeDSL::DSL::V1::ResourceRequirements)
  end
  def resources(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resources_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_spec.rb#25
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def storage_class_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_mode(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_name(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_status.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaimStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def access_modes(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def allocated_resources(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def capacity(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::PersistentVolumeClaimCondition))
    ).returns(T::Array[KubeDSL::DSL::V1::PersistentVolumeClaimCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_status.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def phase(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def resize_status(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_status.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_template.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaimTemplate < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_template.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_template.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PersistentVolumeClaimSpec).void)
    ).returns(KubeDSL::DSL::V1::PersistentVolumeClaimSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_volume_source.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaimVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def claim_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_list.rb#6
class KubeDSL::DSL::V1::PersistentVolumeList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::PersistentVolume))
    ).returns(T::Array[KubeDSL::DSL::V1::PersistentVolume])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_spec.rb#6
class KubeDSL::DSL::V1::PersistentVolumeSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def access_modes(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::AWSElasticBlockStoreVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::AWSElasticBlockStoreVolumeSource)
  end
  def aws_elastic_block_store(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def aws_elastic_block_store_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::AzureDiskVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::AzureDiskVolumeSource)
  end
  def azure_disk(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def azure_disk_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::AzureFilePersistentVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::AzureFilePersistentVolumeSource)
  end
  def azure_file(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def azure_file_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def capacity(&block); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::CephFSPersistentVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::CephFSPersistentVolumeSource)
  end
  def cephfs(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def cephfs_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::CinderPersistentVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::CinderPersistentVolumeSource)
  end
  def cinder(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def cinder_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectReference).void)
    ).returns(KubeDSL::DSL::V1::ObjectReference)
  end
  def claim_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def claim_ref_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::CSIPersistentVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::CSIPersistentVolumeSource)
  end
  def csi(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def csi_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::FCVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::FCVolumeSource)
  end
  def fc(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def fc_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::FlexPersistentVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::FlexPersistentVolumeSource)
  end
  def flex_volume(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def flex_volume_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::FlockerVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::FlockerVolumeSource)
  end
  def flocker(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def flocker_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::GCEPersistentDiskVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::GCEPersistentDiskVolumeSource)
  end
  def gce_persistent_disk(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def gce_persistent_disk_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::GlusterfsPersistentVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::GlusterfsPersistentVolumeSource)
  end
  def glusterfs(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def glusterfs_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::HostPathVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::HostPathVolumeSource)
  end
  def host_path(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def host_path_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ISCSIPersistentVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::ISCSIPersistentVolumeSource)
  end
  def iscsi(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def iscsi_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_spec.rb#104
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LocalVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::LocalVolumeSource)
  end
  def local(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def local_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def mount_options(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NFSVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::NFSVolumeSource)
  end
  def nfs(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def nfs_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::VolumeNodeAffinity).void)
    ).returns(KubeDSL::DSL::V1::VolumeNodeAffinity)
  end
  def node_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_affinity_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def persistent_volume_reclaim_policy(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PhotonPersistentDiskVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::PhotonPersistentDiskVolumeSource)
  end
  def photon_persistent_disk(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def photon_persistent_disk_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PortworxVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::PortworxVolumeSource)
  end
  def portworx_volume(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def portworx_volume_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::QuobyteVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::QuobyteVolumeSource)
  end
  def quobyte(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def quobyte_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::RBDPersistentVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::RBDPersistentVolumeSource)
  end
  def rbd(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def rbd_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ScaleIOPersistentVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::ScaleIOPersistentVolumeSource)
  end
  def scale_io(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_io_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_spec.rb#69
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def storage_class_name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::StorageOSPersistentVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::StorageOSPersistentVolumeSource)
  end
  def storageos(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def storageos_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_mode(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::VsphereVirtualDiskVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::VsphereVirtualDiskVolumeSource)
  end
  def vsphere_volume(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def vsphere_volume_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_status.rb#6
class KubeDSL::DSL::V1::PersistentVolumeStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_status.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def phase(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_status.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/photon_persistent_disk_volume_source.rb#6
class KubeDSL::DSL::V1::PhotonPersistentDiskVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/photon_persistent_disk_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def pd_id(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/photon_persistent_disk_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod.rb#6
class KubeDSL::DSL::V1::Pod < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodSpec).void)).returns(KubeDSL::DSL::V1::PodSpec) }
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodStatus).void)).returns(KubeDSL::DSL::V1::PodStatus) }
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity.rb#6
class KubeDSL::DSL::V1::PodAffinity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def preferred_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::WeightedPodAffinityTerm))
    ).returns(T::Array[KubeDSL::DSL::V1::WeightedPodAffinityTerm])
  end
  def preferred_during_scheduling_ignored_during_executions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def required_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::PodAffinityTerm))
    ).returns(T::Array[KubeDSL::DSL::V1::PodAffinityTerm])
  end
  def required_during_scheduling_ignored_during_executions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity_term.rb#6
class KubeDSL::DSL::V1::PodAffinityTerm < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity_term.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def label_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def label_selector_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def namespace_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def namespace_selector_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespaces(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity_term.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def topology_key(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_anti_affinity.rb#6
class KubeDSL::DSL::V1::PodAntiAffinity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_anti_affinity.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def preferred_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::WeightedPodAffinityTerm))
    ).returns(T::Array[KubeDSL::DSL::V1::WeightedPodAffinityTerm])
  end
  def preferred_during_scheduling_ignored_during_executions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def required_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::PodAffinityTerm))
    ).returns(T::Array[KubeDSL::DSL::V1::PodAffinityTerm])
  end
  def required_during_scheduling_ignored_during_executions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_anti_affinity.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_condition.rb#6
class KubeDSL::DSL::V1::PodCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_condition.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_probe_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_condition.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config.rb#6
class KubeDSL::DSL::V1::PodDNSConfig < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def nameservers(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def option(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::PodDNSConfigOption))
    ).returns(T::Array[KubeDSL::DSL::V1::PodDNSConfigOption])
  end
  def options(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def searches(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config_option.rb#6
class KubeDSL::DSL::V1::PodDNSConfigOption < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config_option.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config_option.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_ip.rb#6
class KubeDSL::DSL::V1::PodIP < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def ip(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_ip.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_ip.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_list.rb#6
class KubeDSL::DSL::V1::PodList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Pod))
    ).returns(T::Array[KubeDSL::DSL::V1::Pod])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_os.rb#6
class KubeDSL::DSL::V1::PodOS < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_os.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_os.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_readiness_gate.rb#6
class KubeDSL::DSL::V1::PodReadinessGate < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def condition_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_readiness_gate.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_readiness_gate.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_security_context.rb#6
class KubeDSL::DSL::V1::PodSecurityContext < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def fs_group(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_group_change_policy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_security_context.rb#44
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def run_as_group(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def run_as_non_root(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def run_as_user(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SELinuxOptions).void)
    ).returns(KubeDSL::DSL::V1::SELinuxOptions)
  end
  def se_linux_options(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def se_linux_options_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SeccompProfile).void)
    ).returns(KubeDSL::DSL::V1::SeccompProfile)
  end
  def seccomp_profile(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def seccomp_profile_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_security_context.rb#29
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def supplemental_groups(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def sysctls(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Sysctl))
    ).returns(T::Array[KubeDSL::DSL::V1::Sysctl])
  end
  def sysctlses(elem_name = nil, &block); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::WindowsSecurityContextOptions).void)
    ).returns(KubeDSL::DSL::V1::WindowsSecurityContextOptions)
  end
  def windows_options(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def windows_options_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_spec.rb#6
class KubeDSL::DSL::V1::PodSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def active_deadline_seconds(val = nil); end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::Affinity).void)).returns(KubeDSL::DSL::V1::Affinity) }
  def affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def affinity_present?; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def automount_service_account_token(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def container(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Container))
    ).returns(T::Array[KubeDSL::DSL::V1::Container])
  end
  def containers(elem_name = nil, &block); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodDNSConfig).void)
    ).returns(KubeDSL::DSL::V1::PodDNSConfig)
  end
  def dns_config(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def dns_config_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def dns_policy(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def enable_service_links(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def ephemeral_container(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::EphemeralContainer))
    ).returns(T::Array[KubeDSL::DSL::V1::EphemeralContainer])
  end
  def ephemeral_containers(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def host_alias(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::HostAlias))
    ).returns(T::Array[KubeDSL::DSL::V1::HostAlias])
  end
  def host_aliases(elem_name = nil, &block); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def host_ipc(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def host_network(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def host_pid(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def hostname(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def image_pull_secret(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::LocalObjectReference))
    ).returns(T::Array[KubeDSL::DSL::V1::LocalObjectReference])
  end
  def image_pull_secrets(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def init_container(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Container))
    ).returns(T::Array[KubeDSL::DSL::V1::Container])
  end
  def init_containers(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_spec.rb#122
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def node_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def node_selector(&block); end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodOS).void)).returns(KubeDSL::DSL::V1::PodOS) }
  def os(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def os_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def overhead(&block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def preemption_policy(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def priority(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def priority_class_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def readiness_gate(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::PodReadinessGate))
    ).returns(T::Array[KubeDSL::DSL::V1::PodReadinessGate])
  end
  def readiness_gates(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def restart_policy(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def runtime_class_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def scheduler_name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodSecurityContext).void)
    ).returns(KubeDSL::DSL::V1::PodSecurityContext)
  end
  def security_context(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def security_context_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_spec.rb#81
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def service_account(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def service_account_name(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def set_hostname_as_fqdn(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def share_process_namespace(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def subdomain(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def termination_grace_period_seconds(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def toleration(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Toleration))
    ).returns(T::Array[KubeDSL::DSL::V1::Toleration])
  end
  def tolerations(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def topology_spread_constraint(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::TopologySpreadConstraint))
    ).returns(T::Array[KubeDSL::DSL::V1::TopologySpreadConstraint])
  end
  def topology_spread_constraints(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volume(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Volume))
    ).returns(T::Array[KubeDSL::DSL::V1::Volume])
  end
  def volumes(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_status.rb#6
class KubeDSL::DSL::V1::PodStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::PodCondition))
    ).returns(T::Array[KubeDSL::DSL::V1::PodCondition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def container_status(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ContainerStatus))
    ).returns(T::Array[KubeDSL::DSL::V1::ContainerStatus])
  end
  def container_statuses(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def ephemeral_container_status(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ContainerStatus))
    ).returns(T::Array[KubeDSL::DSL::V1::ContainerStatus])
  end
  def ephemeral_container_statuses(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def host_ip(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def init_container_status(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ContainerStatus))
    ).returns(T::Array[KubeDSL::DSL::V1::ContainerStatus])
  end
  def init_container_statuses(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_status.rb#53
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def nominated_node_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def phase(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def pod_ip(val = nil); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::PodIP))
    ).returns(T::Array[KubeDSL::DSL::V1::PodIP])
  end
  def pod_ips(elem_name = nil, &block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def qos_class(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_status.rb#35
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def start_time(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template.rb#6
class KubeDSL::DSL::V1::PodTemplate < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodTemplateSpec).void)
    ).returns(KubeDSL::DSL::V1::PodTemplateSpec)
  end
  def template(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_list.rb#6
class KubeDSL::DSL::V1::PodTemplateList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::PodTemplate))
    ).returns(T::Array[KubeDSL::DSL::V1::PodTemplate])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_spec.rb#6
class KubeDSL::DSL::V1::PodTemplateSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_spec.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_spec.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodSpec).void)).returns(KubeDSL::DSL::V1::PodSpec) }
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/port_status.rb#6
class KubeDSL::DSL::V1::PortStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def error(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/port_status.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def port(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def protocol(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/port_status.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/portworx_volume_source.rb#6
class KubeDSL::DSL::V1::PortworxVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/portworx_volume_source.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/portworx_volume_source.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_id(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/preferred_scheduling_term.rb#6
class KubeDSL::DSL::V1::PreferredSchedulingTerm < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/preferred_scheduling_term.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeSelectorTerm).void)
    ).returns(KubeDSL::DSL::V1::NodeSelectorTerm)
  end
  def preference(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def preference_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/preferred_scheduling_term.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def weight(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/probe.rb#6
class KubeDSL::DSL::V1::Probe < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ExecAction).void)
    ).returns(KubeDSL::DSL::V1::ExecAction)
  end
  def exec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def exec_present?; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def failure_threshold(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::GRPCAction).void)
    ).returns(KubeDSL::DSL::V1::GRPCAction)
  end
  def grpc(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def grpc_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::HTTPGetAction).void)
    ).returns(KubeDSL::DSL::V1::HTTPGetAction)
  end
  def http_get(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def http_get_present?; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def initial_delay_seconds(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/probe.rb#44
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def period_seconds(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/probe.rb#29
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def success_threshold(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::TCPSocketAction).void)
    ).returns(KubeDSL::DSL::V1::TCPSocketAction)
  end
  def tcp_socket(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def tcp_socket_present?; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def termination_grace_period_seconds(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def timeout_seconds(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/projected_volume_source.rb#6
class KubeDSL::DSL::V1::ProjectedVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def default_mode(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/projected_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/projected_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def source(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::VolumeProjection))
    ).returns(T::Array[KubeDSL::DSL::V1::VolumeProjection])
  end
  def sources(elem_name = nil, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/quobyte_volume_source.rb#6
class KubeDSL::DSL::V1::QuobyteVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def group(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/quobyte_volume_source.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def registry(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/quobyte_volume_source.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def tenant(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def user(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::RBDPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def image(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def keyring(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_persistent_volume_source.rb#38
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def monitors(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def pool(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretReference).void)
    ).returns(KubeDSL::DSL::V1::SecretReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_persistent_volume_source.rb#25
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def user(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_volume_source.rb#6
class KubeDSL::DSL::V1::RBDVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def image(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def keyring(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_volume_source.rb#38
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def monitors(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def pool(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LocalObjectReference).void)
    ).returns(KubeDSL::DSL::V1::LocalObjectReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_volume_source.rb#25
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def user(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller.rb#6
class KubeDSL::DSL::V1::ReplicationController < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ReplicationControllerSpec).void)
    ).returns(KubeDSL::DSL::V1::ReplicationControllerSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ReplicationControllerStatus).void)
    ).returns(KubeDSL::DSL::V1::ReplicationControllerStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_condition.rb#6
class KubeDSL::DSL::V1::ReplicationControllerCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_condition.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def last_transition_time(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def message(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def reason(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_condition.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def status(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_list.rb#6
class KubeDSL::DSL::V1::ReplicationControllerList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ReplicationController))
    ).returns(T::Array[KubeDSL::DSL::V1::ReplicationController])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_spec.rb#6
class KubeDSL::DSL::V1::ReplicationControllerSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_spec.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def min_ready_seconds(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_spec.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodTemplateSpec).void)
    ).returns(KubeDSL::DSL::V1::PodTemplateSpec)
  end
  def template(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_status.rb#6
class KubeDSL::DSL::V1::ReplicationControllerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def available_replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ReplicationControllerCondition))
    ).returns(T::Array[KubeDSL::DSL::V1::ReplicationControllerCondition])
  end
  def conditions(elem_name = nil, &block); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def fully_labeled_replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_status.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def observed_generation(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def ready_replicas(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def replicas(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_status.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_field_selector.rb#6
class KubeDSL::DSL::V1::ResourceFieldSelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def container_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def divisor(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_field_selector.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def resource(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_field_selector.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota.rb#6
class KubeDSL::DSL::V1::ResourceQuota < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ResourceQuotaSpec).void)
    ).returns(KubeDSL::DSL::V1::ResourceQuotaSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ResourceQuotaStatus).void)
    ).returns(KubeDSL::DSL::V1::ResourceQuotaStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_list.rb#6
class KubeDSL::DSL::V1::ResourceQuotaList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ResourceQuota))
    ).returns(T::Array[KubeDSL::DSL::V1::ResourceQuota])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_spec.rb#6
class KubeDSL::DSL::V1::ResourceQuotaSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def hard(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_spec.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ScopeSelector).void)
    ).returns(KubeDSL::DSL::V1::ScopeSelector)
  end
  def scope_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scope_selector_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def scopes(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_spec.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_status.rb#6
class KubeDSL::DSL::V1::ResourceQuotaStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def hard(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_status.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_status.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def used(&block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_requirements.rb#6
class KubeDSL::DSL::V1::ResourceRequirements < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_requirements.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def limits(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def requests(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_requirements.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/se_linux_options.rb#6
class KubeDSL::DSL::V1::SELinuxOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/se_linux_options.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def level(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def role(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/se_linux_options.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def user(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::ScaleIOPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def gateway(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_persistent_volume_source.rb#44
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def protection_domain(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretReference).void)
    ).returns(KubeDSL::DSL::V1::SecretReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_persistent_volume_source.rb#29
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def ssl_enabled(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def storage_mode(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def storage_pool(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def system(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_name(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_volume_source.rb#6
class KubeDSL::DSL::V1::ScaleIOVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def gateway(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_volume_source.rb#44
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def protection_domain(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LocalObjectReference).void)
    ).returns(KubeDSL::DSL::V1::LocalObjectReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_volume_source.rb#29
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def ssl_enabled(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def storage_mode(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def storage_pool(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def system(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_name(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/scope_selector.rb#6
class KubeDSL::DSL::V1::ScopeSelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scope_selector.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def match_expression(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ScopedResourceSelectorRequirement))
    ).returns(T::Array[KubeDSL::DSL::V1::ScopedResourceSelectorRequirement])
  end
  def match_expressions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scope_selector.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/scoped_resource_selector_requirement.rb#6
class KubeDSL::DSL::V1::ScopedResourceSelectorRequirement < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scoped_resource_selector_requirement.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def operator(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def scope_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scoped_resource_selector_requirement.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def values(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/seccomp_profile.rb#6
class KubeDSL::DSL::V1::SeccompProfile < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/seccomp_profile.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def localhost_profile(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/seccomp_profile.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret.rb#6
class KubeDSL::DSL::V1::Secret < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def data(&block); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def immutable(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret.rb#31
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def string_data(&block); end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_env_source.rb#6
class KubeDSL::DSL::V1::SecretEnvSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_env_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def optional(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_env_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_key_selector.rb#6
class KubeDSL::DSL::V1::SecretKeySelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def key(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_key_selector.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def optional(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_key_selector.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_list.rb#6
class KubeDSL::DSL::V1::SecretList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Secret))
    ).returns(T::Array[KubeDSL::DSL::V1::Secret])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_projection.rb#6
class KubeDSL::DSL::V1::SecretProjection < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::KeyToPath))
    ).returns(T::Array[KubeDSL::DSL::V1::KeyToPath])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_projection.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def optional(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_projection.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_reference.rb#6
class KubeDSL::DSL::V1::SecretReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_reference.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def namespace(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_reference.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_volume_source.rb#6
class KubeDSL::DSL::V1::SecretVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def default_mode(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::KeyToPath))
    ).returns(T::Array[KubeDSL::DSL::V1::KeyToPath])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def optional(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def secret_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/security_context.rb#6
class KubeDSL::DSL::V1::SecurityContext < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def allow_privilege_escalation(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::Capabilities).void)
    ).returns(KubeDSL::DSL::V1::Capabilities)
  end
  def capabilities(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def capabilities_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/security_context.rb#47
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def privileged(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def proc_mount(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only_root_filesystem(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def run_as_group(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def run_as_non_root(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def run_as_user(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SELinuxOptions).void)
    ).returns(KubeDSL::DSL::V1::SELinuxOptions)
  end
  def se_linux_options(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def se_linux_options_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SeccompProfile).void)
    ).returns(KubeDSL::DSL::V1::SeccompProfile)
  end
  def seccomp_profile(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def seccomp_profile_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/security_context.rb#31
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::WindowsSecurityContextOptions).void)
    ).returns(KubeDSL::DSL::V1::WindowsSecurityContextOptions)
  end
  def windows_options(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def windows_options_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service.rb#6
class KubeDSL::DSL::V1::Service < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ServiceSpec).void)
    ).returns(KubeDSL::DSL::V1::ServiceSpec)
  end
  def spec(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ServiceStatus).void)
    ).returns(KubeDSL::DSL::V1::ServiceStatus)
  end
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_account.rb#6
class KubeDSL::DSL::V1::ServiceAccount < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def automount_service_account_token(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def image_pull_secret(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::LocalObjectReference))
    ).returns(T::Array[KubeDSL::DSL::V1::LocalObjectReference])
  end
  def image_pull_secrets(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account.rb#28
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ObjectMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def secret(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ObjectReference))
    ).returns(T::Array[KubeDSL::DSL::V1::ObjectReference])
  end
  def secrets(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_list.rb#6
class KubeDSL::DSL::V1::ServiceAccountList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ServiceAccount))
    ).returns(T::Array[KubeDSL::DSL::V1::ServiceAccount])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_token_projection.rb#6
class KubeDSL::DSL::V1::ServiceAccountTokenProjection < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def audience(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def expiration_seconds(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_token_projection.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def path(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_token_projection.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_list.rb#6
class KubeDSL::DSL::V1::ServiceList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::Service))
    ).returns(T::Array[KubeDSL::DSL::V1::Service])
  end
  def items(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::ListMeta).void)
    ).returns(KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_port.rb#6
class KubeDSL::DSL::V1::ServicePort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def app_protocol(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_port.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def node_port(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def port(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def protocol(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_port.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def target_port(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_spec.rb#6
class KubeDSL::DSL::V1::ServiceSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def allocate_load_balancer_node_ports(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def cluster_i_ps(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def cluster_ip(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def external_i_ps(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def external_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def external_traffic_policy(val = nil); end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def health_check_node_port(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def internal_traffic_policy(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def ip_families(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def ip_family_policy(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_spec.rb#71
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def load_balancer_class(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def load_balancer_ip(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def load_balancer_source_ranges(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::ServicePort))
    ).returns(T::Array[KubeDSL::DSL::V1::ServicePort])
  end
  def ports(elem_name = nil, &block); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def publish_not_ready_addresses(val = nil); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::KeyValueFields).void)).returns(::KubeDSL::KeyValueFields) }
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_spec.rb#47
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def session_affinity(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SessionAffinityConfig).void)
    ).returns(KubeDSL::DSL::V1::SessionAffinityConfig)
  end
  def session_affinity_config(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def session_affinity_config_present?; end

  sig { params(val: T.nilable(String)).returns(String) }
  def type(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_status.rb#6
class KubeDSL::DSL::V1::ServiceStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Meta::V1::Condition))
    ).returns(T::Array[KubeDSL::DSL::Meta::V1::Condition])
  end
  def conditions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_status.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LoadBalancerStatus).void)
    ).returns(KubeDSL::DSL::V1::LoadBalancerStatus)
  end
  def load_balancer(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def load_balancer_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_status.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/session_affinity_config.rb#6
class KubeDSL::DSL::V1::SessionAffinityConfig < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ClientIPConfig).void)
    ).returns(KubeDSL::DSL::V1::ClientIPConfig)
  end
  def client_ip(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def client_ip_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/session_affinity_config.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/session_affinity_config.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::StorageOSPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_persistent_volume_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ObjectReference).void)
    ).returns(KubeDSL::DSL::V1::ObjectReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_persistent_volume_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_namespace(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_volume_source.rb#6
class KubeDSL::DSL::V1::StorageOSVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_volume_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::LocalObjectReference).void)
    ).returns(KubeDSL::DSL::V1::LocalObjectReference)
  end
  def secret_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_volume_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_namespace(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/sysctl.rb#6
class KubeDSL::DSL::V1::Sysctl < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/sysctl.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/sysctl.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/tcp_socket_action.rb#6
class KubeDSL::DSL::V1::TCPSocketAction < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def host(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/tcp_socket_action.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def port(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/tcp_socket_action.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/taint.rb#6
class KubeDSL::DSL::V1::Taint < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def effect(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def key(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/taint.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/taint.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def time_added(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/toleration.rb#6
class KubeDSL::DSL::V1::Toleration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def effect(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def key(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/toleration.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def operator(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/toleration.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def toleration_seconds(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def value(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_label_requirement.rb#6
class KubeDSL::DSL::V1::TopologySelectorLabelRequirement < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def key(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_label_requirement.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_label_requirement.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def values(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_term.rb#6
class KubeDSL::DSL::V1::TopologySelectorTerm < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_term.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def match_label_expression(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::V1::TopologySelectorLabelRequirement))
    ).returns(T::Array[KubeDSL::DSL::V1::TopologySelectorLabelRequirement])
  end
  def match_label_expressions(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_term.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/topology_spread_constraint.rb#6
class KubeDSL::DSL::V1::TopologySpreadConstraint < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_spread_constraint.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::Meta::V1::LabelSelector).void)
    ).returns(KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def label_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def label_selector_present?; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def max_skew(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_spread_constraint.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def topology_key(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def when_unsatisfiable(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/typed_local_object_reference.rb#6
class KubeDSL::DSL::V1::TypedLocalObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def api_group(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def kind(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/typed_local_object_reference.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/typed_local_object_reference.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume.rb#6
class KubeDSL::DSL::V1::Volume < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::AWSElasticBlockStoreVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::AWSElasticBlockStoreVolumeSource)
  end
  def aws_elastic_block_store(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def aws_elastic_block_store_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::AzureDiskVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::AzureDiskVolumeSource)
  end
  def azure_disk(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def azure_disk_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::AzureFileVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::AzureFileVolumeSource)
  end
  def azure_file(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def azure_file_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::CephFSVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::CephFSVolumeSource)
  end
  def cephfs(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def cephfs_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::CinderVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::CinderVolumeSource)
  end
  def cinder(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def cinder_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ConfigMapVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::ConfigMapVolumeSource)
  end
  def config_map(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_map_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::CSIVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::CSIVolumeSource)
  end
  def csi(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def csi_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::DownwardAPIVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::DownwardAPIVolumeSource)
  end
  def downward_api(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def downward_api_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::EmptyDirVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::EmptyDirVolumeSource)
  end
  def empty_dir(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def empty_dir_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::EphemeralVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::EphemeralVolumeSource)
  end
  def ephemeral(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def ephemeral_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::FCVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::FCVolumeSource)
  end
  def fc(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def fc_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::FlexVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::FlexVolumeSource)
  end
  def flex_volume(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def flex_volume_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::FlockerVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::FlockerVolumeSource)
  end
  def flocker(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def flocker_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::GCEPersistentDiskVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::GCEPersistentDiskVolumeSource)
  end
  def gce_persistent_disk(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def gce_persistent_disk_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::GitRepoVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::GitRepoVolumeSource)
  end
  def git_repo(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def git_repo_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::GlusterfsVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::GlusterfsVolumeSource)
  end
  def glusterfs(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def glusterfs_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::HostPathVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::HostPathVolumeSource)
  end
  def host_path(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def host_path_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ISCSIVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::ISCSIVolumeSource)
  end
  def iscsi(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def iscsi_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume.rb#104
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NFSVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::NFSVolumeSource)
  end
  def nfs(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def nfs_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PersistentVolumeClaimVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::PersistentVolumeClaimVolumeSource)
  end
  def persistent_volume_claim(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def persistent_volume_claim_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PhotonPersistentDiskVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::PhotonPersistentDiskVolumeSource)
  end
  def photon_persistent_disk(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def photon_persistent_disk_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PortworxVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::PortworxVolumeSource)
  end
  def portworx_volume(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def portworx_volume_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ProjectedVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::ProjectedVolumeSource)
  end
  def projected(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def projected_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::QuobyteVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::QuobyteVolumeSource)
  end
  def quobyte(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def quobyte_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::RBDVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::RBDVolumeSource)
  end
  def rbd(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def rbd_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ScaleIOVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::ScaleIOVolumeSource)
  end
  def scale_io(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_io_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::SecretVolumeSource)
  end
  def secret(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume.rb#69
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::StorageOSVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::StorageOSVolumeSource)
  end
  def storageos(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def storageos_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::VsphereVirtualDiskVolumeSource).void)
    ).returns(KubeDSL::DSL::V1::VsphereVirtualDiskVolumeSource)
  end
  def vsphere_volume(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def vsphere_volume_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume_device.rb#6
class KubeDSL::DSL::V1::VolumeDevice < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def device_path(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_device.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_device.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume_mount.rb#6
class KubeDSL::DSL::V1::VolumeMount < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_mount.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def mount_path(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def mount_propagation(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def name(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def read_only(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_mount.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def sub_path(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def sub_path_expr(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume_node_affinity.rb#6
class KubeDSL::DSL::V1::VolumeNodeAffinity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_node_affinity.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::NodeSelector).void)
    ).returns(KubeDSL::DSL::V1::NodeSelector)
  end
  def required(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def required_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_node_affinity.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume_projection.rb#6
class KubeDSL::DSL::V1::VolumeProjection < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ConfigMapProjection).void)
    ).returns(KubeDSL::DSL::V1::ConfigMapProjection)
  end
  def config_map(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_map_present?; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::DownwardAPIProjection).void)
    ).returns(KubeDSL::DSL::V1::DownwardAPIProjection)
  end
  def downward_api(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def downward_api_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_projection.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::SecretProjection).void)
    ).returns(KubeDSL::DSL::V1::SecretProjection)
  end
  def secret(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_projection.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::ServiceAccountTokenProjection).void)
    ).returns(KubeDSL::DSL::V1::ServiceAccountTokenProjection)
  end
  def service_account_token(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_account_token_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/vsphere_virtual_disk_volume_source.rb#6
class KubeDSL::DSL::V1::VsphereVirtualDiskVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def fs_type(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/vsphere_virtual_disk_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/vsphere_virtual_disk_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(String)).returns(String) }
  def storage_policy_id(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def storage_policy_name(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def volume_path(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/weighted_pod_affinity_term.rb#6
class KubeDSL::DSL::V1::WeightedPodAffinityTerm < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/weighted_pod_affinity_term.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  sig do
    params(
      block: T.nilable(T.proc.bind(KubeDSL::DSL::V1::PodAffinityTerm).void)
    ).returns(KubeDSL::DSL::V1::PodAffinityTerm)
  end
  def pod_affinity_term(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pod_affinity_term_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/weighted_pod_affinity_term.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  sig { params(val: T.nilable(Integer)).returns(Integer) }
  def weight(val = nil); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/windows_security_context_options.rb#6
class KubeDSL::DSL::V1::WindowsSecurityContextOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  sig { params(val: T.nilable(String)).returns(String) }
  def gmsa_credential_spec(val = nil); end

  sig { params(val: T.nilable(String)).returns(String) }
  def gmsa_credential_spec_name(val = nil); end

  sig { params(val: T.nilable(T::Boolean)).returns(T::Boolean) }
  def host_process(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/windows_security_context_options.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  sig { params(val: T.nilable(String)).returns(String) }
  def run_as_user_name(val = nil); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/windows_security_context_options.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl_object.rb#4
class KubeDSL::DSLObject
  include ::KubeDSL::ValueFields::InstanceMethods
  include ::KubeDSL::Validations::InstanceMethods
  extend ::KubeDSL::ValueFields
  extend ::KubeDSL::ValueFields::ClassMethods
  extend ::KubeDSL::Validations
  extend ::KubeDSL::Validations::ClassMethods
  extend T::Sig

  # T::Sig::WithoutRuntime.sig { params(block: T.nilable(T.proc.bind(::KubeDSL::DSLObject).void)).void }
  #
  # @return [DSLObject] a new instance of DSLObject
  #
  # source://kube-dsl//lib/kube-dsl/dsl_object.rb#11
  sig { params(block: T.nilable(T.proc.bind(::KubeDSL::DSLObject).void)).void }
  def initialize(&block); end

  # T::Sig::WithoutRuntime.sig { returns(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])) }
  #
  # @raise [NotImplementedError]
  #
  # source://kube-dsl//lib/kube-dsl/dsl_object.rb#21
  sig { returns(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])) }
  def serialize; end

  # T::Sig::WithoutRuntime.sig { returns(::KubeDSL::Resource) }
  #
  # source://kube-dsl//lib/kube-dsl/dsl_object.rb#16
  sig { returns(::KubeDSL::Resource) }
  def to_resource; end
end

# source://kube-dsl//lib/kube-dsl/default_field_res.rb#5
class KubeDSL::DefaultFieldRes
  include ::KubeDSL::StringHelpers

  # @return [DefaultFieldRes] a new instance of DefaultFieldRes
  #
  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#10
  def initialize(name, res, allowed_values); end

  # Returns the value of attribute allowed_values.
  #
  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#8
  def allowed_values; end

  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#20
  def fields_to_rbi(_inflector); end

  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#16
  def fields_to_ruby(_inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#8
  def name; end

  # Returns the value of attribute res.
  #
  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#8
  def res; end

  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#28
  def serialize_call(_inflector); end

  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#24
  def validations(_inflector); end
end

# source://kube-dsl//lib/kube-dsl/entrypoint.rb#4
module KubeDSL::Entrypoint
  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#21
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Admissionregistration::V1::ServiceReference).void
    ).returns(::KubeDSL::DSL::Admissionregistration::V1::ServiceReference)
  end
  def admissionregistration_v1_service_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#37
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Admissionregistration::V1::WebhookClientConfig).void
    ).returns(::KubeDSL::DSL::Admissionregistration::V1::WebhookClientConfig)
  end
  def admissionregistration_v1_webhook_client_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#449
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Affinity).void).returns(::KubeDSL::DSL::V1::Affinity) }
  def affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1373
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Rbac::V1::AggregationRule).void
    ).returns(::KubeDSL::DSL::Rbac::V1::AggregationRule)
  end
  def aggregation_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1569
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::APIGroup).void
    ).returns(::KubeDSL::DSL::Meta::V1::APIGroup)
  end
  def api_group(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1573
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::APIGroupList).void
    ).returns(::KubeDSL::DSL::Meta::V1::APIGroupList)
  end
  def api_group_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1577
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::APIResource).void
    ).returns(::KubeDSL::DSL::Meta::V1::APIResource)
  end
  def api_resource(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1581
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::APIResourceList).void
    ).returns(::KubeDSL::DSL::Meta::V1::APIResourceList)
  end
  def api_resource_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1653
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiregistration::V1::APIService).void
    ).returns(::KubeDSL::DSL::Apiregistration::V1::APIService)
  end
  def api_service(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1657
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiregistration::V1::APIServiceCondition).void
    ).returns(::KubeDSL::DSL::Apiregistration::V1::APIServiceCondition)
  end
  def api_service_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1661
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiregistration::V1::APIServiceList).void
    ).returns(::KubeDSL::DSL::Apiregistration::V1::APIServiceList)
  end
  def api_service_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1665
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiregistration::V1::APIServiceSpec).void
    ).returns(::KubeDSL::DSL::Apiregistration::V1::APIServiceSpec)
  end
  def api_service_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1669
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiregistration::V1::APIServiceStatus).void
    ).returns(::KubeDSL::DSL::Apiregistration::V1::APIServiceStatus)
  end
  def api_service_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1585
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::APIVersions).void
    ).returns(::KubeDSL::DSL::Meta::V1::APIVersions)
  end
  def api_versions(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1553
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::ServiceReference).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::ServiceReference)
  end
  def apiextensions_v1_service_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1561
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::WebhookClientConfig).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::WebhookClientConfig)
  end
  def apiextensions_v1_webhook_client_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1673
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiregistration::V1::ServiceReference).void
    ).returns(::KubeDSL::DSL::Apiregistration::V1::ServiceReference)
  end
  def apiregistration_v1_service_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#453
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::AttachedVolume).void
    ).returns(::KubeDSL::DSL::V1::AttachedVolume)
  end
  def attached_volume(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#161
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authentication::V1::TokenRequest).void
    ).returns(::KubeDSL::DSL::Authentication::V1::TokenRequest)
  end
  def authentication_v1_token_request(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#241
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V1::CrossVersionObjectReference).void
    ).returns(::KubeDSL::DSL::Autoscaling::V1::CrossVersionObjectReference)
  end
  def autoscaling_v1_cross_version_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#245
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscaler).void
    ).returns(::KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscaler)
  end
  def autoscaling_v1_horizontal_pod_autoscaler(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#249
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerList).void
    ).returns(::KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerList)
  end
  def autoscaling_v1_horizontal_pod_autoscaler_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#253
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerSpec).void
    ).returns(::KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerSpec)
  end
  def autoscaling_v1_horizontal_pod_autoscaler_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#257
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerStatus).void
    ).returns(::KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerStatus)
  end
  def autoscaling_v1_horizontal_pod_autoscaler_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#281
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::CrossVersionObjectReference).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::CrossVersionObjectReference)
  end
  def autoscaling_v2_cross_version_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#301
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscaler).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscaler)
  end
  def autoscaling_v2_horizontal_pod_autoscaler(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#313
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerList).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerList)
  end
  def autoscaling_v2_horizontal_pod_autoscaler_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#317
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerSpec).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerSpec)
  end
  def autoscaling_v2_horizontal_pod_autoscaler_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#321
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerStatus).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerStatus)
  end
  def autoscaling_v2_horizontal_pod_autoscaler_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#445
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::AWSElasticBlockStoreVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::AWSElasticBlockStoreVolumeSource)
  end
  def aws_elastic_block_store_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#457
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::AzureDiskVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::AzureDiskVolumeSource)
  end
  def azure_disk_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#461
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::AzureFilePersistentVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::AzureFilePersistentVolumeSource)
  end
  def azure_file_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#465
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::AzureFileVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::AzureFileVolumeSource)
  end
  def azure_file_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#469
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Binding).void).returns(::KubeDSL::DSL::V1::Binding) }
  def binding(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#157
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authentication::V1::BoundObjectReference).void
    ).returns(::KubeDSL::DSL::Authentication::V1::BoundObjectReference)
  end
  def bound_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#481
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Capabilities).void).returns(::KubeDSL::DSL::V1::Capabilities) }
  def capabilities(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#485
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::CephFSPersistentVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::CephFSPersistentVolumeSource)
  end
  def ceph_fs_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#489
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::CephFSVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::CephFSVolumeSource)
  end
  def ceph_fs_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#413
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequest).void
    ).returns(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequest)
  end
  def certificate_signing_request(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#417
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequestCondition).void
    ).returns(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequestCondition)
  end
  def certificate_signing_request_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#421
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequestList).void
    ).returns(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequestList)
  end
  def certificate_signing_request_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#425
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequestSpec).void
    ).returns(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequestSpec)
  end
  def certificate_signing_request_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#429
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequestStatus).void
    ).returns(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequestStatus)
  end
  def certificate_signing_request_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#493
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::CinderPersistentVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::CinderPersistentVolumeSource)
  end
  def cinder_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#497
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::CinderVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::CinderVolumeSource)
  end
  def cinder_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#501
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ClientIPConfig).void
    ).returns(::KubeDSL::DSL::V1::ClientIPConfig)
  end
  def client_ip_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1377
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Rbac::V1::ClusterRole).void
    ).returns(::KubeDSL::DSL::Rbac::V1::ClusterRole)
  end
  def cluster_role(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1381
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Rbac::V1::ClusterRoleBinding).void
    ).returns(::KubeDSL::DSL::Rbac::V1::ClusterRoleBinding)
  end
  def cluster_role_binding(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1385
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Rbac::V1::ClusterRoleBindingList).void
    ).returns(::KubeDSL::DSL::Rbac::V1::ClusterRoleBindingList)
  end
  def cluster_role_binding_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1389
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Rbac::V1::ClusterRoleList).void
    ).returns(::KubeDSL::DSL::Rbac::V1::ClusterRoleList)
  end
  def cluster_role_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#505
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ComponentCondition).void
    ).returns(::KubeDSL::DSL::V1::ComponentCondition)
  end
  def component_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#509
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ComponentStatus).void
    ).returns(::KubeDSL::DSL::V1::ComponentStatus)
  end
  def component_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#513
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ComponentStatusList).void
    ).returns(::KubeDSL::DSL::V1::ComponentStatusList)
  end
  def component_status_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1589
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::Condition).void
    ).returns(::KubeDSL::DSL::Meta::V1::Condition)
  end
  def condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#517
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::ConfigMap).void).returns(::KubeDSL::DSL::V1::ConfigMap) }
  def config_map(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#521
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ConfigMapEnvSource).void
    ).returns(::KubeDSL::DSL::V1::ConfigMapEnvSource)
  end
  def config_map_env_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#525
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ConfigMapKeySelector).void
    ).returns(::KubeDSL::DSL::V1::ConfigMapKeySelector)
  end
  def config_map_key_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#529
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::ConfigMapList).void).returns(::KubeDSL::DSL::V1::ConfigMapList) }
  def config_map_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#533
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ConfigMapNodeConfigSource).void
    ).returns(::KubeDSL::DSL::V1::ConfigMapNodeConfigSource)
  end
  def config_map_node_config_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#537
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ConfigMapProjection).void
    ).returns(::KubeDSL::DSL::V1::ConfigMapProjection)
  end
  def config_map_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#541
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ConfigMapVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::ConfigMapVolumeSource)
  end
  def config_map_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#545
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Container).void).returns(::KubeDSL::DSL::V1::Container) }
  def container(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#549
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ContainerImage).void
    ).returns(::KubeDSL::DSL::V1::ContainerImage)
  end
  def container_image(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#553
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::ContainerPort).void).returns(::KubeDSL::DSL::V1::ContainerPort) }
  def container_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#273
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricSource).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricSource)
  end
  def container_resource_metric_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#277
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricStatus).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricStatus)
  end
  def container_resource_metric_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#557
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ContainerState).void
    ).returns(::KubeDSL::DSL::V1::ContainerState)
  end
  def container_state(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#561
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ContainerStateRunning).void
    ).returns(::KubeDSL::DSL::V1::ContainerStateRunning)
  end
  def container_state_running(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#565
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ContainerStateTerminated).void
    ).returns(::KubeDSL::DSL::V1::ContainerStateTerminated)
  end
  def container_state_terminated(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#569
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ContainerStateWaiting).void
    ).returns(::KubeDSL::DSL::V1::ContainerStateWaiting)
  end
  def container_state_waiting(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#573
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ContainerStatus).void
    ).returns(::KubeDSL::DSL::V1::ContainerStatus)
  end
  def container_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#41
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::ControllerRevision).void
    ).returns(::KubeDSL::DSL::Apps::V1::ControllerRevision)
  end
  def controller_revision(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#45
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::ControllerRevisionList).void
    ).returns(::KubeDSL::DSL::Apps::V1::ControllerRevisionList)
  end
  def controller_revision_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#369
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Batch::V1::CronJob).void
    ).returns(::KubeDSL::DSL::Batch::V1::CronJob)
  end
  def cron_job(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#373
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Batch::V1::CronJobList).void
    ).returns(::KubeDSL::DSL::Batch::V1::CronJobList)
  end
  def cron_job_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#377
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Batch::V1::CronJobSpec).void
    ).returns(::KubeDSL::DSL::Batch::V1::CronJobSpec)
  end
  def cron_job_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#381
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Batch::V1::CronJobStatus).void
    ).returns(::KubeDSL::DSL::Batch::V1::CronJobStatus)
  end
  def cron_job_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1429
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::CSIDriver).void
    ).returns(::KubeDSL::DSL::Storage::V1::CSIDriver)
  end
  def csi_driver(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1433
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::CSIDriverList).void
    ).returns(::KubeDSL::DSL::Storage::V1::CSIDriverList)
  end
  def csi_driver_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1437
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::CSIDriverSpec).void
    ).returns(::KubeDSL::DSL::Storage::V1::CSIDriverSpec)
  end
  def csi_driver_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1441
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::CSINode).void
    ).returns(::KubeDSL::DSL::Storage::V1::CSINode)
  end
  def csi_node(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1445
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::CSINodeDriver).void
    ).returns(::KubeDSL::DSL::Storage::V1::CSINodeDriver)
  end
  def csi_node_driver(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1449
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::CSINodeList).void
    ).returns(::KubeDSL::DSL::Storage::V1::CSINodeList)
  end
  def csi_node_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1453
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::CSINodeSpec).void
    ).returns(::KubeDSL::DSL::Storage::V1::CSINodeSpec)
  end
  def csi_node_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#473
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::CSIPersistentVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::CSIPersistentVolumeSource)
  end
  def csi_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#477
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::CSIVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::CSIVolumeSource)
  end
  def csi_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1497
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::CustomResourceColumnDefinition).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceColumnDefinition)
  end
  def custom_resource_column_definition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1501
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::CustomResourceConversion).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceConversion)
  end
  def custom_resource_conversion(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1505
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinition).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinition)
  end
  def custom_resource_definition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1509
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionCondition).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionCondition)
  end
  def custom_resource_definition_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1513
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionList).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionList)
  end
  def custom_resource_definition_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1517
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionNames).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionNames)
  end
  def custom_resource_definition_names(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1521
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionSpec).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionSpec)
  end
  def custom_resource_definition_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1525
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionStatus).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionStatus)
  end
  def custom_resource_definition_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1529
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionVersion).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionVersion)
  end
  def custom_resource_definition_version(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1533
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresourceScale).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresourceScale)
  end
  def custom_resource_subresource_scale(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1537
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresources).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresources)
  end
  def custom_resource_subresources(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1541
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::CustomResourceValidation).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceValidation)
  end
  def custom_resource_validation(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#577
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::DaemonEndpoint).void
    ).returns(::KubeDSL::DSL::V1::DaemonEndpoint)
  end
  def daemon_endpoint(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#49
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::DaemonSet).void
    ).returns(::KubeDSL::DSL::Apps::V1::DaemonSet)
  end
  def daemon_set(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#53
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::DaemonSetCondition).void
    ).returns(::KubeDSL::DSL::Apps::V1::DaemonSetCondition)
  end
  def daemon_set_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#57
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::DaemonSetList).void
    ).returns(::KubeDSL::DSL::Apps::V1::DaemonSetList)
  end
  def daemon_set_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#61
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::DaemonSetSpec).void
    ).returns(::KubeDSL::DSL::Apps::V1::DaemonSetSpec)
  end
  def daemon_set_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#65
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::DaemonSetStatus).void
    ).returns(::KubeDSL::DSL::Apps::V1::DaemonSetStatus)
  end
  def daemon_set_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#69
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::DaemonSetUpdateStrategy).void
    ).returns(::KubeDSL::DSL::Apps::V1::DaemonSetUpdateStrategy)
  end
  def daemon_set_update_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1593
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::DeleteOptions).void
    ).returns(::KubeDSL::DSL::Meta::V1::DeleteOptions)
  end
  def delete_options(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#73
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::Deployment).void
    ).returns(::KubeDSL::DSL::Apps::V1::Deployment)
  end
  def deployment(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#77
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::DeploymentCondition).void
    ).returns(::KubeDSL::DSL::Apps::V1::DeploymentCondition)
  end
  def deployment_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#81
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::DeploymentList).void
    ).returns(::KubeDSL::DSL::Apps::V1::DeploymentList)
  end
  def deployment_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#85
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::DeploymentSpec).void
    ).returns(::KubeDSL::DSL::Apps::V1::DeploymentSpec)
  end
  def deployment_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#89
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::DeploymentStatus).void
    ).returns(::KubeDSL::DSL::Apps::V1::DeploymentStatus)
  end
  def deployment_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#93
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::DeploymentStrategy).void
    ).returns(::KubeDSL::DSL::Apps::V1::DeploymentStrategy)
  end
  def deployment_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1217
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Discovery::V1::EndpointPort).void
    ).returns(::KubeDSL::DSL::Discovery::V1::EndpointPort)
  end
  def discovery_v1_endpoint_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#581
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::DownwardAPIProjection).void
    ).returns(::KubeDSL::DSL::V1::DownwardAPIProjection)
  end
  def downward_api_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#585
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::DownwardAPIVolumeFile).void
    ).returns(::KubeDSL::DSL::V1::DownwardAPIVolumeFile)
  end
  def downward_api_volume_file(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#589
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::DownwardAPIVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::DownwardAPIVolumeSource)
  end
  def downward_api_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#593
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::EmptyDirVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::EmptyDirVolumeSource)
  end
  def empty_dir_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1205
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Discovery::V1::Endpoint).void
    ).returns(::KubeDSL::DSL::Discovery::V1::Endpoint)
  end
  def endpoint(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#597
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::EndpointAddress).void
    ).returns(::KubeDSL::DSL::V1::EndpointAddress)
  end
  def endpoint_address(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1209
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Discovery::V1::EndpointConditions).void
    ).returns(::KubeDSL::DSL::Discovery::V1::EndpointConditions)
  end
  def endpoint_conditions(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1213
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Discovery::V1::EndpointHints).void
    ).returns(::KubeDSL::DSL::Discovery::V1::EndpointHints)
  end
  def endpoint_hints(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1221
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Discovery::V1::EndpointSlice).void
    ).returns(::KubeDSL::DSL::Discovery::V1::EndpointSlice)
  end
  def endpoint_slice(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1225
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Discovery::V1::EndpointSliceList).void
    ).returns(::KubeDSL::DSL::Discovery::V1::EndpointSliceList)
  end
  def endpoint_slice_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#605
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::EndpointSubset).void
    ).returns(::KubeDSL::DSL::V1::EndpointSubset)
  end
  def endpoint_subset(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#609
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Endpoints).void).returns(::KubeDSL::DSL::V1::Endpoints) }
  def endpoints(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#613
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::EndpointsList).void).returns(::KubeDSL::DSL::V1::EndpointsList) }
  def endpoints_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#617
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::EnvFromSource).void).returns(::KubeDSL::DSL::V1::EnvFromSource) }
  def env_from_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#621
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::EnvVar).void).returns(::KubeDSL::DSL::V1::EnvVar) }
  def env_var(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#625
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::EnvVarSource).void).returns(::KubeDSL::DSL::V1::EnvVarSource) }
  def env_var_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#629
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::EphemeralContainer).void
    ).returns(::KubeDSL::DSL::V1::EphemeralContainer)
  end
  def ephemeral_container(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#633
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::EphemeralVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::EphemeralVolumeSource)
  end
  def ephemeral_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#649
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::EventSource).void).returns(::KubeDSL::DSL::V1::EventSource) }
  def event_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1233
  sig { params(block: T.proc.bind(::KubeDSL::DSL::Events::V1::Event).void).returns(::KubeDSL::DSL::Events::V1::Event) }
  def events_v1_event(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1237
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Events::V1::EventList).void
    ).returns(::KubeDSL::DSL::Events::V1::EventList)
  end
  def events_v1_event_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1241
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Events::V1::EventSeries).void
    ).returns(::KubeDSL::DSL::Events::V1::EventSeries)
  end
  def events_v1_event_series(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1353
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Policy::V1::Eviction).void
    ).returns(::KubeDSL::DSL::Policy::V1::Eviction)
  end
  def eviction(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#653
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::ExecAction).void).returns(::KubeDSL::DSL::V1::ExecAction) }
  def exec_action(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1545
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::ExternalDocumentation).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::ExternalDocumentation)
  end
  def external_documentation(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#285
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::ExternalMetricSource).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::ExternalMetricSource)
  end
  def external_metric_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#289
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::ExternalMetricStatus).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::ExternalMetricStatus)
  end
  def external_metric_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#657
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::FCVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::FCVolumeSource)
  end
  def fc_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#661
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::FlexPersistentVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::FlexPersistentVolumeSource)
  end
  def flex_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#665
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::FlexVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::FlexVolumeSource)
  end
  def flex_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#669
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::FlockerVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::FlockerVolumeSource)
  end
  def flocker_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1229
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Discovery::V1::ForZone).void
    ).returns(::KubeDSL::DSL::Discovery::V1::ForZone)
  end
  def for_zone(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#673
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::GCEPersistentDiskVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::GCEPersistentDiskVolumeSource)
  end
  def gce_persistent_disk_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#681
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::GitRepoVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::GitRepoVolumeSource)
  end
  def git_repo_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#685
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::GlusterfsPersistentVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::GlusterfsPersistentVolumeSource)
  end
  def glusterfs_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#689
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::GlusterfsVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::GlusterfsVolumeSource)
  end
  def glusterfs_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1597
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::GroupVersionForDiscovery).void
    ).returns(::KubeDSL::DSL::Meta::V1::GroupVersionForDiscovery)
  end
  def group_version_for_discovery(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#677
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::GRPCAction).void).returns(::KubeDSL::DSL::V1::GRPCAction) }
  def grpc_action(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#305
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerBehavior).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerBehavior)
  end
  def horizontal_pod_autoscaler_behavior(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#309
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerCondition).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerCondition)
  end
  def horizontal_pod_autoscaler_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#701
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::HostAlias).void).returns(::KubeDSL::DSL::V1::HostAlias) }
  def host_alias(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#705
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::HostPathVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::HostPathVolumeSource)
  end
  def host_path_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#293
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::HPAScalingPolicy).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::HPAScalingPolicy)
  end
  def hpa_scaling_policy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#297
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::HPAScalingRules).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::HPAScalingRules)
  end
  def hpa_scaling_rules(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#693
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::HTTPGetAction).void).returns(::KubeDSL::DSL::V1::HTTPGetAction) }
  def http_get_action(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#697
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::HTTPHeader).void).returns(::KubeDSL::DSL::V1::HTTPHeader) }
  def http_header(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1245
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::HTTPIngressPath).void
    ).returns(::KubeDSL::DSL::Networking::V1::HTTPIngressPath)
  end
  def http_ingress_path(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1249
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::HTTPIngressRuleValue).void
    ).returns(::KubeDSL::DSL::Networking::V1::HTTPIngressRuleValue)
  end
  def http_ingress_rule_value(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1649
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Pkg::Version::Info).void
    ).returns(::KubeDSL::DSL::Pkg::Version::Info)
  end
  def info(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1257
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::Ingress).void
    ).returns(::KubeDSL::DSL::Networking::V1::Ingress)
  end
  def ingress(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1261
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::IngressBackend).void
    ).returns(::KubeDSL::DSL::Networking::V1::IngressBackend)
  end
  def ingress_backend(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1265
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::IngressClass).void
    ).returns(::KubeDSL::DSL::Networking::V1::IngressClass)
  end
  def ingress_class(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1269
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::IngressClassList).void
    ).returns(::KubeDSL::DSL::Networking::V1::IngressClassList)
  end
  def ingress_class_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1273
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::IngressClassParametersReference).void
    ).returns(::KubeDSL::DSL::Networking::V1::IngressClassParametersReference)
  end
  def ingress_class_parameters_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1277
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::IngressClassSpec).void
    ).returns(::KubeDSL::DSL::Networking::V1::IngressClassSpec)
  end
  def ingress_class_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1281
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::IngressList).void
    ).returns(::KubeDSL::DSL::Networking::V1::IngressList)
  end
  def ingress_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1285
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::IngressRule).void
    ).returns(::KubeDSL::DSL::Networking::V1::IngressRule)
  end
  def ingress_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1289
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::IngressServiceBackend).void
    ).returns(::KubeDSL::DSL::Networking::V1::IngressServiceBackend)
  end
  def ingress_service_backend(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1293
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::IngressSpec).void
    ).returns(::KubeDSL::DSL::Networking::V1::IngressSpec)
  end
  def ingress_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1297
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::IngressStatus).void
    ).returns(::KubeDSL::DSL::Networking::V1::IngressStatus)
  end
  def ingress_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1301
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::IngressTLS).void
    ).returns(::KubeDSL::DSL::Networking::V1::IngressTLS)
  end
  def ingress_tls(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1253
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::IPBlock).void
    ).returns(::KubeDSL::DSL::Networking::V1::IPBlock)
  end
  def ip_block(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#709
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ISCSIPersistentVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::ISCSIPersistentVolumeSource)
  end
  def iscsi_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#713
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ISCSIVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::ISCSIVolumeSource)
  end
  def iscsi_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#385
  sig { params(block: T.proc.bind(::KubeDSL::DSL::Batch::V1::Job).void).returns(::KubeDSL::DSL::Batch::V1::Job) }
  def job(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#389
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Batch::V1::JobCondition).void
    ).returns(::KubeDSL::DSL::Batch::V1::JobCondition)
  end
  def job_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#393
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Batch::V1::JobList).void
    ).returns(::KubeDSL::DSL::Batch::V1::JobList)
  end
  def job_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#397
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Batch::V1::JobSpec).void
    ).returns(::KubeDSL::DSL::Batch::V1::JobSpec)
  end
  def job_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#401
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Batch::V1::JobStatus).void
    ).returns(::KubeDSL::DSL::Batch::V1::JobStatus)
  end
  def job_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#405
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Batch::V1::JobTemplateSpec).void
    ).returns(::KubeDSL::DSL::Batch::V1::JobTemplateSpec)
  end
  def job_template_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1549
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps)
  end
  def json_schema_props(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#717
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::KeyToPath).void).returns(::KubeDSL::DSL::V1::KeyToPath) }
  def key_to_path(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1601
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::LabelSelector).void
    ).returns(::KubeDSL::DSL::Meta::V1::LabelSelector)
  end
  def label_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1605
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::LabelSelectorRequirement).void
    ).returns(::KubeDSL::DSL::Meta::V1::LabelSelectorRequirement)
  end
  def label_selector_requirement(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#433
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Coordination::V1::Lease).void
    ).returns(::KubeDSL::DSL::Coordination::V1::Lease)
  end
  def lease(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#437
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Coordination::V1::LeaseList).void
    ).returns(::KubeDSL::DSL::Coordination::V1::LeaseList)
  end
  def lease_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#441
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Coordination::V1::LeaseSpec).void
    ).returns(::KubeDSL::DSL::Coordination::V1::LeaseSpec)
  end
  def lease_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#721
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Lifecycle).void).returns(::KubeDSL::DSL::V1::Lifecycle) }
  def lifecycle(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#725
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::LifecycleHandler).void
    ).returns(::KubeDSL::DSL::V1::LifecycleHandler)
  end
  def lifecycle_handler(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#729
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::LimitRange).void).returns(::KubeDSL::DSL::V1::LimitRange) }
  def limit_range(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#733
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::LimitRangeItem).void
    ).returns(::KubeDSL::DSL::V1::LimitRangeItem)
  end
  def limit_range_item(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#737
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::LimitRangeList).void
    ).returns(::KubeDSL::DSL::V1::LimitRangeList)
  end
  def limit_range_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#741
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::LimitRangeSpec).void
    ).returns(::KubeDSL::DSL::V1::LimitRangeSpec)
  end
  def limit_range_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1609
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::ListMeta).void
    ).returns(::KubeDSL::DSL::Meta::V1::ListMeta)
  end
  def list_meta(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#745
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::LoadBalancerIngress).void
    ).returns(::KubeDSL::DSL::V1::LoadBalancerIngress)
  end
  def load_balancer_ingress(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#749
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::LoadBalancerStatus).void
    ).returns(::KubeDSL::DSL::V1::LoadBalancerStatus)
  end
  def load_balancer_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#753
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::LocalObjectReference).void
    ).returns(::KubeDSL::DSL::V1::LocalObjectReference)
  end
  def local_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#189
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authorization::V1::LocalSubjectAccessReview).void
    ).returns(::KubeDSL::DSL::Authorization::V1::LocalSubjectAccessReview)
  end
  def local_subject_access_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#757
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::LocalVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::LocalVolumeSource)
  end
  def local_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1613
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::ManagedFieldsEntry).void
    ).returns(::KubeDSL::DSL::Meta::V1::ManagedFieldsEntry)
  end
  def managed_fields_entry(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#325
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::MetricIdentifier).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::MetricIdentifier)
  end
  def metric_identifier(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#329
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::MetricSpec).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::MetricSpec)
  end
  def metric_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#333
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::MetricStatus).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::MetricStatus)
  end
  def metric_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#337
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::MetricTarget).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::MetricTarget)
  end
  def metric_target(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#341
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::MetricValueStatus).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::MetricValueStatus)
  end
  def metric_value_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#5
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Admissionregistration::V1::MutatingWebhook).void
    ).returns(::KubeDSL::DSL::Admissionregistration::V1::MutatingWebhook)
  end
  def mutating_webhook(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#9
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfiguration).void
    ).returns(::KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfiguration)
  end
  def mutating_webhook_configuration(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#13
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfigurationList).void
    ).returns(::KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfigurationList)
  end
  def mutating_webhook_configuration_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#765
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Namespace).void).returns(::KubeDSL::DSL::V1::Namespace) }
  def namespace(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#769
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::NamespaceCondition).void
    ).returns(::KubeDSL::DSL::V1::NamespaceCondition)
  end
  def namespace_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#773
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::NamespaceList).void).returns(::KubeDSL::DSL::V1::NamespaceList) }
  def namespace_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#777
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::NamespaceSpec).void).returns(::KubeDSL::DSL::V1::NamespaceSpec) }
  def namespace_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#781
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::NamespaceStatus).void
    ).returns(::KubeDSL::DSL::V1::NamespaceStatus)
  end
  def namespace_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1305
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::NetworkPolicy).void
    ).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicy)
  end
  def network_policy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1309
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::NetworkPolicyEgressRule).void
    ).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicyEgressRule)
  end
  def network_policy_egress_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1313
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::NetworkPolicyIngressRule).void
    ).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicyIngressRule)
  end
  def network_policy_ingress_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1317
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::NetworkPolicyList).void
    ).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicyList)
  end
  def network_policy_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1321
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::NetworkPolicyPeer).void
    ).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicyPeer)
  end
  def network_policy_peer(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1325
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::NetworkPolicyPort).void
    ).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicyPort)
  end
  def network_policy_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1329
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::NetworkPolicySpec).void
    ).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicySpec)
  end
  def network_policy_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#761
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::NFSVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::NFSVolumeSource)
  end
  def nfs_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#785
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Node).void).returns(::KubeDSL::DSL::V1::Node) }
  def node(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#789
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::NodeAddress).void).returns(::KubeDSL::DSL::V1::NodeAddress) }
  def node_address(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#793
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::NodeAffinity).void).returns(::KubeDSL::DSL::V1::NodeAffinity) }
  def node_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#797
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::NodeCondition).void).returns(::KubeDSL::DSL::V1::NodeCondition) }
  def node_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#801
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::NodeConfigSource).void
    ).returns(::KubeDSL::DSL::V1::NodeConfigSource)
  end
  def node_config_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#805
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::NodeConfigStatus).void
    ).returns(::KubeDSL::DSL::V1::NodeConfigStatus)
  end
  def node_config_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#809
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::NodeDaemonEndpoints).void
    ).returns(::KubeDSL::DSL::V1::NodeDaemonEndpoints)
  end
  def node_daemon_endpoints(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#813
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::NodeList).void).returns(::KubeDSL::DSL::V1::NodeList) }
  def node_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#817
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::NodeSelector).void).returns(::KubeDSL::DSL::V1::NodeSelector) }
  def node_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#821
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::NodeSelectorRequirement).void
    ).returns(::KubeDSL::DSL::V1::NodeSelectorRequirement)
  end
  def node_selector_requirement(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#825
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::NodeSelectorTerm).void
    ).returns(::KubeDSL::DSL::V1::NodeSelectorTerm)
  end
  def node_selector_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#829
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::NodeSpec).void).returns(::KubeDSL::DSL::V1::NodeSpec) }
  def node_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#833
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::NodeStatus).void).returns(::KubeDSL::DSL::V1::NodeStatus) }
  def node_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#837
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::NodeSystemInfo).void
    ).returns(::KubeDSL::DSL::V1::NodeSystemInfo)
  end
  def node_system_info(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#193
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authorization::V1::NonResourceAttributes).void
    ).returns(::KubeDSL::DSL::Authorization::V1::NonResourceAttributes)
  end
  def non_resource_attributes(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#197
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authorization::V1::NonResourceRule).void
    ).returns(::KubeDSL::DSL::Authorization::V1::NonResourceRule)
  end
  def non_resource_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#841
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ObjectFieldSelector).void
    ).returns(::KubeDSL::DSL::V1::ObjectFieldSelector)
  end
  def object_field_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1617
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::ObjectMeta).void
    ).returns(::KubeDSL::DSL::Meta::V1::ObjectMeta)
  end
  def object_meta(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#345
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::ObjectMetricSource).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::ObjectMetricSource)
  end
  def object_metric_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#349
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::ObjectMetricStatus).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::ObjectMetricStatus)
  end
  def object_metric_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#845
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ObjectReference).void
    ).returns(::KubeDSL::DSL::V1::ObjectReference)
  end
  def object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1337
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Node::V1::Overhead).void
    ).returns(::KubeDSL::DSL::Node::V1::Overhead)
  end
  def overhead(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1621
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::OwnerReference).void
    ).returns(::KubeDSL::DSL::Meta::V1::OwnerReference)
  end
  def owner_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#849
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PersistentVolume).void
    ).returns(::KubeDSL::DSL::V1::PersistentVolume)
  end
  def persistent_volume(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#853
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PersistentVolumeClaim).void
    ).returns(::KubeDSL::DSL::V1::PersistentVolumeClaim)
  end
  def persistent_volume_claim(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#857
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PersistentVolumeClaimCondition).void
    ).returns(::KubeDSL::DSL::V1::PersistentVolumeClaimCondition)
  end
  def persistent_volume_claim_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#861
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PersistentVolumeClaimList).void
    ).returns(::KubeDSL::DSL::V1::PersistentVolumeClaimList)
  end
  def persistent_volume_claim_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#865
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PersistentVolumeClaimSpec).void
    ).returns(::KubeDSL::DSL::V1::PersistentVolumeClaimSpec)
  end
  def persistent_volume_claim_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#869
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PersistentVolumeClaimStatus).void
    ).returns(::KubeDSL::DSL::V1::PersistentVolumeClaimStatus)
  end
  def persistent_volume_claim_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#873
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PersistentVolumeClaimTemplate).void
    ).returns(::KubeDSL::DSL::V1::PersistentVolumeClaimTemplate)
  end
  def persistent_volume_claim_template(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#877
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PersistentVolumeClaimVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::PersistentVolumeClaimVolumeSource)
  end
  def persistent_volume_claim_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#881
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PersistentVolumeList).void
    ).returns(::KubeDSL::DSL::V1::PersistentVolumeList)
  end
  def persistent_volume_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#885
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PersistentVolumeSpec).void
    ).returns(::KubeDSL::DSL::V1::PersistentVolumeSpec)
  end
  def persistent_volume_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#889
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PersistentVolumeStatus).void
    ).returns(::KubeDSL::DSL::V1::PersistentVolumeStatus)
  end
  def persistent_volume_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#893
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PhotonPersistentDiskVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::PhotonPersistentDiskVolumeSource)
  end
  def photon_persistent_disk_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#897
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Pod).void).returns(::KubeDSL::DSL::V1::Pod) }
  def pod(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#901
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::PodAffinity).void).returns(::KubeDSL::DSL::V1::PodAffinity) }
  def pod_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#905
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PodAffinityTerm).void
    ).returns(::KubeDSL::DSL::V1::PodAffinityTerm)
  end
  def pod_affinity_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#909
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PodAntiAffinity).void
    ).returns(::KubeDSL::DSL::V1::PodAntiAffinity)
  end
  def pod_anti_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#913
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::PodCondition).void).returns(::KubeDSL::DSL::V1::PodCondition) }
  def pod_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1357
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Policy::V1::PodDisruptionBudget).void
    ).returns(::KubeDSL::DSL::Policy::V1::PodDisruptionBudget)
  end
  def pod_disruption_budget(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1361
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Policy::V1::PodDisruptionBudgetList).void
    ).returns(::KubeDSL::DSL::Policy::V1::PodDisruptionBudgetList)
  end
  def pod_disruption_budget_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1365
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Policy::V1::PodDisruptionBudgetSpec).void
    ).returns(::KubeDSL::DSL::Policy::V1::PodDisruptionBudgetSpec)
  end
  def pod_disruption_budget_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1369
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Policy::V1::PodDisruptionBudgetStatus).void
    ).returns(::KubeDSL::DSL::Policy::V1::PodDisruptionBudgetStatus)
  end
  def pod_disruption_budget_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#917
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::PodDNSConfig).void).returns(::KubeDSL::DSL::V1::PodDNSConfig) }
  def pod_dns_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#921
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PodDNSConfigOption).void
    ).returns(::KubeDSL::DSL::V1::PodDNSConfigOption)
  end
  def pod_dns_config_option(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#925
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::PodIP).void).returns(::KubeDSL::DSL::V1::PodIP) }
  def pod_ip(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#929
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::PodList).void).returns(::KubeDSL::DSL::V1::PodList) }
  def pod_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#933
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::PodOS).void).returns(::KubeDSL::DSL::V1::PodOS) }
  def pod_os(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#937
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PodReadinessGate).void
    ).returns(::KubeDSL::DSL::V1::PodReadinessGate)
  end
  def pod_readiness_gate(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#941
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PodSecurityContext).void
    ).returns(::KubeDSL::DSL::V1::PodSecurityContext)
  end
  def pod_security_context(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#945
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::PodSpec).void).returns(::KubeDSL::DSL::V1::PodSpec) }
  def pod_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#949
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::PodStatus).void).returns(::KubeDSL::DSL::V1::PodStatus) }
  def pod_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#953
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::PodTemplate).void).returns(::KubeDSL::DSL::V1::PodTemplate) }
  def pod_template(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#957
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PodTemplateList).void
    ).returns(::KubeDSL::DSL::V1::PodTemplateList)
  end
  def pod_template_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#961
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PodTemplateSpec).void
    ).returns(::KubeDSL::DSL::V1::PodTemplateSpec)
  end
  def pod_template_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#353
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::PodsMetricSource).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::PodsMetricSource)
  end
  def pods_metric_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#357
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::PodsMetricStatus).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::PodsMetricStatus)
  end
  def pods_metric_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1393
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Rbac::V1::PolicyRule).void
    ).returns(::KubeDSL::DSL::Rbac::V1::PolicyRule)
  end
  def policy_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#965
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::PortStatus).void).returns(::KubeDSL::DSL::V1::PortStatus) }
  def port_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#969
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PortworxVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::PortworxVolumeSource)
  end
  def portworx_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1625
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::Preconditions).void
    ).returns(::KubeDSL::DSL::Meta::V1::Preconditions)
  end
  def preconditions(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#973
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::PreferredSchedulingTerm).void
    ).returns(::KubeDSL::DSL::V1::PreferredSchedulingTerm)
  end
  def preferred_scheduling_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1421
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Scheduling::V1::PriorityClass).void
    ).returns(::KubeDSL::DSL::Scheduling::V1::PriorityClass)
  end
  def priority_class(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1425
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Scheduling::V1::PriorityClassList).void
    ).returns(::KubeDSL::DSL::Scheduling::V1::PriorityClassList)
  end
  def priority_class_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#977
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Probe).void).returns(::KubeDSL::DSL::V1::Probe) }
  def probe(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#981
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ProjectedVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::ProjectedVolumeSource)
  end
  def projected_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#985
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::QuobyteVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::QuobyteVolumeSource)
  end
  def quobyte_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#989
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::RBDPersistentVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::RBDPersistentVolumeSource)
  end
  def rbd_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#993
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::RBDVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::RBDVolumeSource)
  end
  def rbd_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#97
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::ReplicaSet).void
    ).returns(::KubeDSL::DSL::Apps::V1::ReplicaSet)
  end
  def replica_set(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#101
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::ReplicaSetCondition).void
    ).returns(::KubeDSL::DSL::Apps::V1::ReplicaSetCondition)
  end
  def replica_set_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#105
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::ReplicaSetList).void
    ).returns(::KubeDSL::DSL::Apps::V1::ReplicaSetList)
  end
  def replica_set_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#109
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::ReplicaSetSpec).void
    ).returns(::KubeDSL::DSL::Apps::V1::ReplicaSetSpec)
  end
  def replica_set_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#113
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::ReplicaSetStatus).void
    ).returns(::KubeDSL::DSL::Apps::V1::ReplicaSetStatus)
  end
  def replica_set_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#997
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ReplicationController).void
    ).returns(::KubeDSL::DSL::V1::ReplicationController)
  end
  def replication_controller(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1001
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ReplicationControllerCondition).void
    ).returns(::KubeDSL::DSL::V1::ReplicationControllerCondition)
  end
  def replication_controller_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1005
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ReplicationControllerList).void
    ).returns(::KubeDSL::DSL::V1::ReplicationControllerList)
  end
  def replication_controller_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1009
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ReplicationControllerSpec).void
    ).returns(::KubeDSL::DSL::V1::ReplicationControllerSpec)
  end
  def replication_controller_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1013
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ReplicationControllerStatus).void
    ).returns(::KubeDSL::DSL::V1::ReplicationControllerStatus)
  end
  def replication_controller_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#201
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authorization::V1::ResourceAttributes).void
    ).returns(::KubeDSL::DSL::Authorization::V1::ResourceAttributes)
  end
  def resource_attributes(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1017
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ResourceFieldSelector).void
    ).returns(::KubeDSL::DSL::V1::ResourceFieldSelector)
  end
  def resource_field_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#361
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::ResourceMetricSource).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::ResourceMetricSource)
  end
  def resource_metric_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#365
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V2::ResourceMetricStatus).void
    ).returns(::KubeDSL::DSL::Autoscaling::V2::ResourceMetricStatus)
  end
  def resource_metric_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1021
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::ResourceQuota).void).returns(::KubeDSL::DSL::V1::ResourceQuota) }
  def resource_quota(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1025
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ResourceQuotaList).void
    ).returns(::KubeDSL::DSL::V1::ResourceQuotaList)
  end
  def resource_quota_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1029
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ResourceQuotaSpec).void
    ).returns(::KubeDSL::DSL::V1::ResourceQuotaSpec)
  end
  def resource_quota_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1033
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ResourceQuotaStatus).void
    ).returns(::KubeDSL::DSL::V1::ResourceQuotaStatus)
  end
  def resource_quota_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1037
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ResourceRequirements).void
    ).returns(::KubeDSL::DSL::V1::ResourceRequirements)
  end
  def resource_requirements(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#205
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authorization::V1::ResourceRule).void
    ).returns(::KubeDSL::DSL::Authorization::V1::ResourceRule)
  end
  def resource_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1397
  sig { params(block: T.proc.bind(::KubeDSL::DSL::Rbac::V1::Role).void).returns(::KubeDSL::DSL::Rbac::V1::Role) }
  def role(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1401
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Rbac::V1::RoleBinding).void
    ).returns(::KubeDSL::DSL::Rbac::V1::RoleBinding)
  end
  def role_binding(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1405
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Rbac::V1::RoleBindingList).void
    ).returns(::KubeDSL::DSL::Rbac::V1::RoleBindingList)
  end
  def role_binding_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1409
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Rbac::V1::RoleList).void
    ).returns(::KubeDSL::DSL::Rbac::V1::RoleList)
  end
  def role_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1413
  sig { params(block: T.proc.bind(::KubeDSL::DSL::Rbac::V1::RoleRef).void).returns(::KubeDSL::DSL::Rbac::V1::RoleRef) }
  def role_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#117
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::RollingUpdateDaemonSet).void
    ).returns(::KubeDSL::DSL::Apps::V1::RollingUpdateDaemonSet)
  end
  def rolling_update_daemon_set(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#121
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::RollingUpdateDeployment).void
    ).returns(::KubeDSL::DSL::Apps::V1::RollingUpdateDeployment)
  end
  def rolling_update_deployment(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#125
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::RollingUpdateStatefulSetStrategy).void
    ).returns(::KubeDSL::DSL::Apps::V1::RollingUpdateStatefulSetStrategy)
  end
  def rolling_update_stateful_set_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#17
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Admissionregistration::V1::RuleWithOperations).void
    ).returns(::KubeDSL::DSL::Admissionregistration::V1::RuleWithOperations)
  end
  def rule_with_operations(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1341
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Node::V1::RuntimeClass).void
    ).returns(::KubeDSL::DSL::Node::V1::RuntimeClass)
  end
  def runtime_class(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1345
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Node::V1::RuntimeClassList).void
    ).returns(::KubeDSL::DSL::Node::V1::RuntimeClassList)
  end
  def runtime_class_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#261
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V1::Scale).void
    ).returns(::KubeDSL::DSL::Autoscaling::V1::Scale)
  end
  def scale(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1045
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ScaleIOPersistentVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::ScaleIOPersistentVolumeSource)
  end
  def scale_io_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1049
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ScaleIOVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::ScaleIOVolumeSource)
  end
  def scale_io_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#265
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V1::ScaleSpec).void
    ).returns(::KubeDSL::DSL::Autoscaling::V1::ScaleSpec)
  end
  def scale_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#269
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Autoscaling::V1::ScaleStatus).void
    ).returns(::KubeDSL::DSL::Autoscaling::V1::ScaleStatus)
  end
  def scale_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1349
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Node::V1::Scheduling).void
    ).returns(::KubeDSL::DSL::Node::V1::Scheduling)
  end
  def scheduling(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1053
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::ScopeSelector).void).returns(::KubeDSL::DSL::V1::ScopeSelector) }
  def scope_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1057
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ScopedResourceSelectorRequirement).void
    ).returns(::KubeDSL::DSL::V1::ScopedResourceSelectorRequirement)
  end
  def scoped_resource_selector_requirement(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1041
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::SELinuxOptions).void
    ).returns(::KubeDSL::DSL::V1::SELinuxOptions)
  end
  def se_linux_options(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1061
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::SeccompProfile).void
    ).returns(::KubeDSL::DSL::V1::SeccompProfile)
  end
  def seccomp_profile(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1065
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Secret).void).returns(::KubeDSL::DSL::V1::Secret) }
  def secret(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1069
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::SecretEnvSource).void
    ).returns(::KubeDSL::DSL::V1::SecretEnvSource)
  end
  def secret_env_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1073
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::SecretKeySelector).void
    ).returns(::KubeDSL::DSL::V1::SecretKeySelector)
  end
  def secret_key_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1077
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::SecretList).void).returns(::KubeDSL::DSL::V1::SecretList) }
  def secret_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1081
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::SecretProjection).void
    ).returns(::KubeDSL::DSL::V1::SecretProjection)
  end
  def secret_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1085
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::SecretReference).void
    ).returns(::KubeDSL::DSL::V1::SecretReference)
  end
  def secret_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1089
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::SecretVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::SecretVolumeSource)
  end
  def secret_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1093
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::SecurityContext).void
    ).returns(::KubeDSL::DSL::V1::SecurityContext)
  end
  def security_context(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#209
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReview).void
    ).returns(::KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReview)
  end
  def self_subject_access_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#213
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReviewSpec).void
    ).returns(::KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReviewSpec)
  end
  def self_subject_access_review_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#217
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReview).void
    ).returns(::KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReview)
  end
  def self_subject_rules_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#221
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReviewSpec).void
    ).returns(::KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReviewSpec)
  end
  def self_subject_rules_review_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1629
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::ServerAddressByClientCIDR).void
    ).returns(::KubeDSL::DSL::Meta::V1::ServerAddressByClientCIDR)
  end
  def server_address_by_client_cidr(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1097
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Service).void).returns(::KubeDSL::DSL::V1::Service) }
  def service(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1101
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ServiceAccount).void
    ).returns(::KubeDSL::DSL::V1::ServiceAccount)
  end
  def service_account(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1105
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ServiceAccountList).void
    ).returns(::KubeDSL::DSL::V1::ServiceAccountList)
  end
  def service_account_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1109
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::ServiceAccountTokenProjection).void
    ).returns(::KubeDSL::DSL::V1::ServiceAccountTokenProjection)
  end
  def service_account_token_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1333
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Networking::V1::ServiceBackendPort).void
    ).returns(::KubeDSL::DSL::Networking::V1::ServiceBackendPort)
  end
  def service_backend_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1113
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::ServiceList).void).returns(::KubeDSL::DSL::V1::ServiceList) }
  def service_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1117
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::ServicePort).void).returns(::KubeDSL::DSL::V1::ServicePort) }
  def service_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1121
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::ServiceSpec).void).returns(::KubeDSL::DSL::V1::ServiceSpec) }
  def service_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1125
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::ServiceStatus).void).returns(::KubeDSL::DSL::V1::ServiceStatus) }
  def service_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1129
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::SessionAffinityConfig).void
    ).returns(::KubeDSL::DSL::V1::SessionAffinityConfig)
  end
  def session_affinity_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#129
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::StatefulSet).void
    ).returns(::KubeDSL::DSL::Apps::V1::StatefulSet)
  end
  def stateful_set(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#133
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::StatefulSetCondition).void
    ).returns(::KubeDSL::DSL::Apps::V1::StatefulSetCondition)
  end
  def stateful_set_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#137
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::StatefulSetList).void
    ).returns(::KubeDSL::DSL::Apps::V1::StatefulSetList)
  end
  def stateful_set_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#141
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::StatefulSetPersistentVolumeClaimRetentionPolicy).void
    ).returns(::KubeDSL::DSL::Apps::V1::StatefulSetPersistentVolumeClaimRetentionPolicy)
  end
  def stateful_set_persistent_volume_claim_retention_policy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#145
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::StatefulSetSpec).void
    ).returns(::KubeDSL::DSL::Apps::V1::StatefulSetSpec)
  end
  def stateful_set_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#149
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::StatefulSetStatus).void
    ).returns(::KubeDSL::DSL::Apps::V1::StatefulSetStatus)
  end
  def stateful_set_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#153
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apps::V1::StatefulSetUpdateStrategy).void
    ).returns(::KubeDSL::DSL::Apps::V1::StatefulSetUpdateStrategy)
  end
  def stateful_set_update_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1633
  sig { params(block: T.proc.bind(::KubeDSL::DSL::Meta::V1::Status).void).returns(::KubeDSL::DSL::Meta::V1::Status) }
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1637
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::StatusCause).void
    ).returns(::KubeDSL::DSL::Meta::V1::StatusCause)
  end
  def status_cause(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1641
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::StatusDetails).void
    ).returns(::KubeDSL::DSL::Meta::V1::StatusDetails)
  end
  def status_details(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1457
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::StorageClass).void
    ).returns(::KubeDSL::DSL::Storage::V1::StorageClass)
  end
  def storage_class(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1461
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::StorageClassList).void
    ).returns(::KubeDSL::DSL::Storage::V1::StorageClassList)
  end
  def storage_class_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1133
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::StorageOSPersistentVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::StorageOSPersistentVolumeSource)
  end
  def storage_os_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1137
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::StorageOSVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::StorageOSVolumeSource)
  end
  def storage_os_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1465
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::TokenRequest).void
    ).returns(::KubeDSL::DSL::Storage::V1::TokenRequest)
  end
  def storage_v1_token_request(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1417
  sig { params(block: T.proc.bind(::KubeDSL::DSL::Rbac::V1::Subject).void).returns(::KubeDSL::DSL::Rbac::V1::Subject) }
  def subject(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#225
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authorization::V1::SubjectAccessReview).void
    ).returns(::KubeDSL::DSL::Authorization::V1::SubjectAccessReview)
  end
  def subject_access_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#229
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authorization::V1::SubjectAccessReviewSpec).void
    ).returns(::KubeDSL::DSL::Authorization::V1::SubjectAccessReviewSpec)
  end
  def subject_access_review_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#233
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authorization::V1::SubjectAccessReviewStatus).void
    ).returns(::KubeDSL::DSL::Authorization::V1::SubjectAccessReviewStatus)
  end
  def subject_access_review_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#237
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authorization::V1::SubjectRulesReviewStatus).void
    ).returns(::KubeDSL::DSL::Authorization::V1::SubjectRulesReviewStatus)
  end
  def subject_rules_review_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1141
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Sysctl).void).returns(::KubeDSL::DSL::V1::Sysctl) }
  def sysctl(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1149
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Taint).void).returns(::KubeDSL::DSL::V1::Taint) }
  def taint(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1145
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::TCPSocketAction).void
    ).returns(::KubeDSL::DSL::V1::TCPSocketAction)
  end
  def tcp_socket_action(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#165
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authentication::V1::TokenRequestSpec).void
    ).returns(::KubeDSL::DSL::Authentication::V1::TokenRequestSpec)
  end
  def token_request_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#169
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authentication::V1::TokenRequestStatus).void
    ).returns(::KubeDSL::DSL::Authentication::V1::TokenRequestStatus)
  end
  def token_request_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#173
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authentication::V1::TokenReview).void
    ).returns(::KubeDSL::DSL::Authentication::V1::TokenReview)
  end
  def token_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#177
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authentication::V1::TokenReviewSpec).void
    ).returns(::KubeDSL::DSL::Authentication::V1::TokenReviewSpec)
  end
  def token_review_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#181
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authentication::V1::TokenReviewStatus).void
    ).returns(::KubeDSL::DSL::Authentication::V1::TokenReviewStatus)
  end
  def token_review_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1153
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Toleration).void).returns(::KubeDSL::DSL::V1::Toleration) }
  def toleration(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1157
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::TopologySelectorLabelRequirement).void
    ).returns(::KubeDSL::DSL::V1::TopologySelectorLabelRequirement)
  end
  def topology_selector_label_requirement(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1161
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::TopologySelectorTerm).void
    ).returns(::KubeDSL::DSL::V1::TopologySelectorTerm)
  end
  def topology_selector_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1165
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::TopologySpreadConstraint).void
    ).returns(::KubeDSL::DSL::V1::TopologySpreadConstraint)
  end
  def topology_spread_constraint(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1169
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::TypedLocalObjectReference).void
    ).returns(::KubeDSL::DSL::V1::TypedLocalObjectReference)
  end
  def typed_local_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#409
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Batch::V1::UncountedTerminatedPods).void
    ).returns(::KubeDSL::DSL::Batch::V1::UncountedTerminatedPods)
  end
  def uncounted_terminated_pods(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#185
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Authentication::V1::UserInfo).void
    ).returns(::KubeDSL::DSL::Authentication::V1::UserInfo)
  end
  def user_info(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#601
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::EndpointPort).void).returns(::KubeDSL::DSL::V1::EndpointPort) }
  def v1_endpoint_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#637
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Event).void).returns(::KubeDSL::DSL::V1::Event) }
  def v1_event(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#641
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::EventList).void).returns(::KubeDSL::DSL::V1::EventList) }
  def v1_event_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#645
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::EventSeries).void).returns(::KubeDSL::DSL::V1::EventSeries) }
  def v1_event_series(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#25
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhook).void
    ).returns(::KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhook)
  end
  def validating_webhook(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#29
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfiguration).void
    ).returns(::KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfiguration)
  end
  def validating_webhook_configuration(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#33
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfigurationList).void
    ).returns(::KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfigurationList)
  end
  def validating_webhook_configuration_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1557
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::ValidationRule).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::ValidationRule)
  end
  def validation_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1173
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::Volume).void).returns(::KubeDSL::DSL::V1::Volume) }
  def volume(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1469
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::VolumeAttachment).void
    ).returns(::KubeDSL::DSL::Storage::V1::VolumeAttachment)
  end
  def volume_attachment(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1473
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::VolumeAttachmentList).void
    ).returns(::KubeDSL::DSL::Storage::V1::VolumeAttachmentList)
  end
  def volume_attachment_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1477
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::VolumeAttachmentSource).void
    ).returns(::KubeDSL::DSL::Storage::V1::VolumeAttachmentSource)
  end
  def volume_attachment_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1481
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::VolumeAttachmentSpec).void
    ).returns(::KubeDSL::DSL::Storage::V1::VolumeAttachmentSpec)
  end
  def volume_attachment_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1485
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::VolumeAttachmentStatus).void
    ).returns(::KubeDSL::DSL::Storage::V1::VolumeAttachmentStatus)
  end
  def volume_attachment_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1177
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::VolumeDevice).void).returns(::KubeDSL::DSL::V1::VolumeDevice) }
  def volume_device(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1489
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::VolumeError).void
    ).returns(::KubeDSL::DSL::Storage::V1::VolumeError)
  end
  def volume_error(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1181
  sig { params(block: T.proc.bind(::KubeDSL::DSL::V1::VolumeMount).void).returns(::KubeDSL::DSL::V1::VolumeMount) }
  def volume_mount(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1185
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::VolumeNodeAffinity).void
    ).returns(::KubeDSL::DSL::V1::VolumeNodeAffinity)
  end
  def volume_node_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1493
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Storage::V1::VolumeNodeResources).void
    ).returns(::KubeDSL::DSL::Storage::V1::VolumeNodeResources)
  end
  def volume_node_resources(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1189
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::VolumeProjection).void
    ).returns(::KubeDSL::DSL::V1::VolumeProjection)
  end
  def volume_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1193
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::VsphereVirtualDiskVolumeSource).void
    ).returns(::KubeDSL::DSL::V1::VsphereVirtualDiskVolumeSource)
  end
  def vsphere_virtual_disk_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1645
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Meta::V1::WatchEvent).void
    ).returns(::KubeDSL::DSL::Meta::V1::WatchEvent)
  end
  def watch_event(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1565
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::Apiextensions::V1::WebhookConversion).void
    ).returns(::KubeDSL::DSL::Apiextensions::V1::WebhookConversion)
  end
  def webhook_conversion(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1197
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::WeightedPodAffinityTerm).void
    ).returns(::KubeDSL::DSL::V1::WeightedPodAffinityTerm)
  end
  def weighted_pod_affinity_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1201
  sig do
    params(
      block: T.proc.bind(::KubeDSL::DSL::V1::WindowsSecurityContextOptions).void
    ).returns(::KubeDSL::DSL::V1::WindowsSecurityContextOptions)
  end
  def windows_security_context_options(&block); end
end

# source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#4
class KubeDSL::EntrypointBuilder
  include ::KubeDSL::StringHelpers

  # @return [EntrypointBuilder] a new instance of EntrypointBuilder
  #
  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#9
  def initialize(builder, &block); end

  # Returns the value of attribute block.
  #
  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#7
  def block; end

  # Returns the value of attribute builder.
  #
  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#7
  def builder; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#14
  def entrypoint; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#37
  def entrypoint_rbi; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#60
  def path; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#64
  def rbi_path; end

  private

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#82
  def ambiguous_kinds; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#98
  def indent; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#94
  def indent_level; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#73
  def kinds; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#102
  def method_name_for(resource); end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#88
  def module_namespace; end
end

# source://kube-dsl//lib/kube-dsl/external_ref.rb#3
class KubeDSL::ExternalRef < ::KubeDSL::Ref
  # source://kube-dsl//lib/kube-dsl/external_ref.rb#8
  def document; end

  # source://kube-dsl//lib/kube-dsl/external_ref.rb#4
  def meta; end

  # assume external refs are always object fields
  #
  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/external_ref.rb#13
  def object?; end
end

# source://kube-dsl//lib/kube-dsl/external_resource_meta.rb#3
class KubeDSL::ExternalResourceMeta
  # @return [ExternalResourceMeta] a new instance of ExternalResourceMeta
  #
  # source://kube-dsl//lib/kube-dsl/external_resource_meta.rb#6
  def initialize(ref); end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/external_resource_meta.rb#10
  def external?; end

  # Returns the value of attribute ref.
  #
  # source://kube-dsl//lib/kube-dsl/external_resource_meta.rb#4
  def ref; end
end

# source://kube-dsl//lib/kube-dsl/field_res.rb#3
class KubeDSL::FieldRes
  include ::KubeDSL::StringHelpers
  include ::KubeDSL::RbiHelpers

  # @return [FieldRes] a new instance of FieldRes
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#11
  def initialize(name, type, required); end

  # source://kube-dsl//lib/kube-dsl/field_res.rb#21
  def fields_to_rbi(inflector); end

  # source://kube-dsl//lib/kube-dsl/field_res.rb#17
  def fields_to_ruby(_inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#7
  def name; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#7
  def required; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#7
  def required?; end

  # source://kube-dsl//lib/kube-dsl/field_res.rb#34
  def serialize_call(_inflector); end

  # Returns the value of attribute type.
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#7
  def type; end

  # source://kube-dsl//lib/kube-dsl/field_res.rb#28
  def validations(_inflector); end

  private

  # source://kube-dsl//lib/kube-dsl/field_res.rb#40
  def ruby_safe_name; end
end

# source://kube-dsl//lib/kube-dsl/generator.rb#4
class KubeDSL::Generator
  # @return [Generator] a new instance of Generator
  #
  # source://kube-dsl//lib/kube-dsl/generator.rb#7
  def initialize(*args, **kwargs); end

  # Returns the value of attribute builder.
  #
  # source://kube-dsl//lib/kube-dsl/generator.rb#5
  def builder; end

  # source://kube-dsl//lib/kube-dsl/generator.rb#11
  def generate(include_rbi: T.unsafe(nil)); end

  # source://kube-dsl//lib/kube-dsl/generator.rb#43
  def generate_autoload_files; end

  # source://kube-dsl//lib/kube-dsl/generator.rb#54
  def generate_entrypoint_file(include_rbi: T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/generator.rb#17
  def generate_resource_files(include_rbi: T.unsafe(nil)); end
end

# source://kube-dsl//lib/kube-dsl/inflector.rb#6
class KubeDSL::Inflector
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://kube-dsl//lib/kube-dsl/inflector.rb#19
  def inflector; end

  class << self
    # source://kube-dsl//lib/kube-dsl/inflector.rb#10
    def pluralize(*args); end

    # source://kube-dsl//lib/kube-dsl/inflector.rb#14
    def singularize(*args); end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://kube-dsl//lib/kube-dsl/inline_ref.rb#3
class KubeDSL::InlineRef
  # @return [InlineRef] a new instance of InlineRef
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#6
  def initialize(name, document, parent_ref, serialize_handlers); end

  # Returns the value of attribute document.
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#4
  def document; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#21
  def inline?; end

  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#29
  def kind; end

  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#25
  def meta; end

  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#13
  def method_missing(method_name, *args, **kwargs, &block); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#4
  def name; end

  # Returns the value of attribute parent_ref.
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#4
  def parent_ref; end

  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#47
  def ruby_autoload_path; end

  # Returns the value of attribute serialize_handlers.
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#4
  def serialize_handlers; end

  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#57
  def shorten(filename); end

  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#43
  def str; end

  private

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#17
  def respond_to_missing?(method_name); end
end

# source://kube-dsl//lib/kube-dsl.rb#3
KubeDSL::KUBERNETES_VERSION = T.let(T.unsafe(nil), String)

# source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#3
class KubeDSL::KeyValueFieldRes
  include ::KubeDSL::StringHelpers

  # @return [KeyValueFieldRes] a new instance of KeyValueFieldRes
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#10
  def initialize(name, res, type, required); end

  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#23
  def fields_to_rbi(_inflector); end

  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#17
  def fields_to_ruby(_inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#6
  def name; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#6
  def required; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#6
  def required?; end

  # Returns the value of attribute res.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#6
  def res; end

  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#36
  def serialize_call(_inflector); end

  # Returns the value of attribute type.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#6
  def type; end

  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#30
  def validations(_inflector); end
end

# source://kube-dsl//lib/kube-dsl/key_value_fields.rb#6
class KubeDSL::KeyValueFields
  extend T::Sig

  sig { returns(Symbol) }
  attr_reader :format

  sig { returns(T::Hash[Symbol, String]) }
  attr_reader :kv_pairs

  # T::Sig::WithoutRuntime.sig { params(format: Symbol).void }
  #
  # @return [KeyValueFields] a new instance of KeyValueFields
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#16
  sig { params(format: Symbol).void }
  def initialize(format: T.unsafe(nil)); end

  # T::Sig::WithoutRuntime.sig { params(key: Symbol, value: String).void }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#22
  sig { params(key: Symbol, value: String).void }
  def add(key, value); end

  # T::Sig::WithoutRuntime.sig { params(key: Symbol).returns(T.nilable(String)) }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#32
  sig { params(key: Symbol).returns(T.nilable(String)) }
  def get(key); end

  # T::Sig::WithoutRuntime.sig { params(other: KubeDSL::KeyValueFields).void }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#49
  sig { params(other: KubeDSL::KeyValueFields).void }
  def merge!(other); end

  # T::Sig::WithoutRuntime.sig { params(key: Symbol).void }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#27
  sig { params(key: Symbol).void }
  def remove(key); end

  # T::Sig::WithoutRuntime.sig { returns(T::Hash[Symbol, String]) }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#42
  sig { returns(T::Hash[Symbol, String]) }
  def serialize; end

  # T::Sig::WithoutRuntime.sig { params(key: Symbol, value: String).void }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#37
  sig { params(key: Symbol, value: String).void }
  def set(key, value); end

  private

  # T::Sig::WithoutRuntime.sig { params(data: String).returns(String) }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#56
  sig { params(data: String).returns(String) }
  def serialize_value(data); end
end

# source://kube-dsl//lib/kube-dsl/object_field_res.rb#3
class KubeDSL::ObjectFieldRes
  include ::KubeDSL::StringHelpers

  # @return [ObjectFieldRes] a new instance of ObjectFieldRes
  #
  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#8
  def initialize(name, res); end

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#19
  def fields_to_rbi(_inflector); end

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#13
  def fields_to_ruby(_inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#6
  def name; end

  # Returns the value of attribute res.
  #
  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#6
  def res; end

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#36
  def serialize_call(_inflector); end

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#29
  def validations(_inflector); end

  private

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#46
  def ruby_safe_name; end

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#42
  def ruby_type; end
end

# source://kube-dsl//lib/kube-dsl/rbi_helpers.rb#3
module KubeDSL::RbiHelpers
  include ::KubeDSL::StringHelpers

  # source://kube-dsl//lib/kube-dsl/rbi_helpers.rb#13
  def rbi_type_for(type_str); end
end

# source://kube-dsl//lib/kube-dsl/rbi_helpers.rb#6
KubeDSL::RbiHelpers::TYPE_MAP = T.let(T.unsafe(nil), Hash)

# source://kube-dsl//lib/kube-dsl/ref.rb#3
class KubeDSL::Ref
  include ::KubeDSL::StringHelpers

  # @return [Ref] a new instance of Ref
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#9
  def initialize(str, ruby_namespace_prefix, inflector, schema_dir, autoload_prefix, serialize_handlers); end

  # Returns the value of attribute autoload_prefix.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#7
  def autoload_prefix; end

  # source://kube-dsl//lib/kube-dsl/ref.rb#39
  def document; end

  # Returns the value of attribute inflector.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def inflector; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#31
  def inline?; end

  # Returns the value of attribute kind.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def kind; end

  # source://kube-dsl//lib/kube-dsl/ref.rb#35
  def meta; end

  # Returns the value of attribute namespace.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def namespace; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#43
  def object?; end

  # source://kube-dsl//lib/kube-dsl/ref.rb#59
  def ruby_autoload_path; end

  # source://kube-dsl//lib/kube-dsl/ref.rb#47
  def ruby_namespace; end

  # Returns the value of attribute ruby_namespace_prefix.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#7
  def ruby_namespace_prefix; end

  # Returns the value of attribute schema_dir.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def schema_dir; end

  # Returns the value of attribute serialize_handlers.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#7
  def serialize_handlers; end

  # Returns the value of attribute str.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def str; end

  # Returns the value of attribute version.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def version; end

  private

  # source://kube-dsl//lib/kube-dsl/ref.rb#71
  def filename; end
end

# source://kube-dsl//lib/kube-dsl/resource.rb#4
class KubeDSL::Resource
  extend T::Sig

  sig { returns(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])) }
  attr_reader :contents

  # T::Sig::WithoutRuntime.sig { params(contents: T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])).void }
  #
  # @return [Resource] a new instance of Resource
  #
  # source://kube-dsl//lib/kube-dsl/resource.rb#11
  sig { params(contents: T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])).void }
  def initialize(contents); end

  # T::Sig::WithoutRuntime.sig { returns(T.nilable(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped]))) }
  #
  # source://kube-dsl//lib/kube-dsl/resource.rb#16
  sig { returns(T.nilable(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped]))) }
  def serialize; end

  # T::Sig::WithoutRuntime.sig { returns(KubeDSL::Resource) }
  #
  # source://kube-dsl//lib/kube-dsl/resource.rb#26
  sig { returns(KubeDSL::Resource) }
  def to_resource; end

  # T::Sig::WithoutRuntime.sig { returns(String) }
  #
  # source://kube-dsl//lib/kube-dsl/resource.rb#21
  sig { returns(String) }
  def to_yaml; end

  private

  # T::Sig::WithoutRuntime.sig {
  #   params(obj: T.any(String, KubeDSL::AllowBlank, T::Array[T.untyped], T::Hash[T.untyped, T.untyped]))
  #     .returns(T.nilable(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])))
  # }
  #
  # source://kube-dsl//lib/kube-dsl/resource.rb#36
  sig do
    params(
      obj: T.any(String, KubeDSL::AllowBlank, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])
    ).returns(T.nilable(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])))
  end
  def cleanup(obj); end
end

# source://kube-dsl//lib/kube-dsl/resource_meta.rb#4
class KubeDSL::ResourceMeta
  include ::KubeDSL::StringHelpers

  # @return [ResourceMeta] a new instance of ResourceMeta
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#9
  def initialize(ref, inflector, serialize_handlers); end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#20
  def empty?; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#16
  def external?; end

  # Returns the value of attribute fields.
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#7
  def fields; end

  # Returns the value of attribute inflector.
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#7
  def inflector; end

  # Returns the value of attribute ref.
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#7
  def ref; end

  # Returns the value of attribute serialize_handlers.
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#7
  def serialize_handlers; end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#51
  def to_rbi; end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#24
  def to_ruby; end

  private

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#106
  def fields_to_rbi(level); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#97
  def fields_to_ruby(level); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#91
  def indent(*lines, level); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#150
  def quote_sym(sym_str); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#142
  def serialize_call_for(field); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#127
  def serialize_method(level); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#118
  def validations(level); end
end

# source://kube-dsl//lib/kube-dsl/serialize_handler.rb#4
class KubeDSL::SerializeHandler
  # @return [SerializeHandler] a new instance of SerializeHandler
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#7
  def initialize(namespace, version, kind, field, &block); end

  # Returns the value of attribute block.
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#5
  def block; end

  # Returns the value of attribute field.
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#5
  def field; end

  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#22
  def handle(res, inflector); end

  # Returns the value of attribute kind.
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#5
  def kind; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#15
  def matches?(ref, field); end

  # Returns the value of attribute namespace.
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#5
  def namespace; end

  # Returns the value of attribute version.
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#5
  def version; end
end

# source://kube-dsl//lib/kube-dsl/string_helpers.rb#3
module KubeDSL::StringHelpers
  extend ::KubeDSL::StringHelpers

  # source://kube-dsl//lib/kube-dsl/string_helpers.rb#10
  def capitalize(str); end

  # source://kube-dsl//lib/kube-dsl/string_helpers.rb#14
  def underscore(str); end

  # source://kube-dsl//lib/kube-dsl/string_helpers.rb#22
  def unkeywordify(str); end
end

# source://kube-dsl//lib/kube-dsl/string_helpers.rb#4
KubeDSL::StringHelpers::RUBY_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://kube-dsl//lib/kube-dsl/validations.rb#6
module KubeDSL::Validations
  class << self
    # @private
    #
    # source://kube-dsl//lib/kube-dsl/validations.rb#227
    sig { params(base: T.untyped).returns(T.untyped) }
    def extended(base); end
  end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#49
class KubeDSL::Validations::ArrayValidator
  sig { returns(T.untyped) }
  attr_reader :field_name

  sig { returns(T.untyped) }
  attr_reader :kind_of

  # @return [ArrayValidator] a new instance of ArrayValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#52
  sig { params(field_name: T.untyped, opts: T.untyped).void }
  def initialize(field_name, opts); end

  # source://kube-dsl//lib/kube-dsl/validations.rb#57
  sig { params(obj: T.untyped, errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#165
module KubeDSL::Validations::ClassMethods
  # source://kube-dsl//lib/kube-dsl/validations.rb#166
  sig { params(field_name: T.untyped, options: T.untyped).returns(T.untyped) }
  def validates(field_name, options); end

  # source://kube-dsl//lib/kube-dsl/validations.rb#189
  sig { returns(T.untyped) }
  def validators; end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#101
class KubeDSL::Validations::FieldValidator
  sig { returns(T.untyped) }
  attr_reader :field_name

  sig { returns(T.untyped) }
  attr_reader :format_validator

  # @return [FieldValidator] a new instance of FieldValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#104
  sig { params(field_name: T.untyped, options: T.untyped).void }
  def initialize(field_name, options = T.unsafe(nil)); end

  # source://kube-dsl//lib/kube-dsl/validations.rb#109
  sig { params(obj: T.untyped, errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#74
class KubeDSL::Validations::FormatValidator
  sig { returns(T.untyped) }
  attr_reader :format

  # @return [FormatValidator] a new instance of FormatValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#77
  sig { params(format: T.untyped).void }
  def initialize(format); end

  # source://kube-dsl//lib/kube-dsl/validations.rb#85
  sig { returns(T.untyped) }
  def klasses; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#81
  sig { params(obj: T.untyped).returns(T.untyped) }
  def valid?(obj); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#150
class KubeDSL::Validations::InclusionValidator
  sig { returns(T.untyped) }
  attr_reader :field_name

  sig { returns(T.untyped) }
  attr_reader :list

  # @return [InclusionValidator] a new instance of InclusionValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#153
  sig { params(field_name: T.untyped, opts: T.untyped).void }
  def initialize(field_name, opts); end

  # source://kube-dsl//lib/kube-dsl/validations.rb#158
  sig { params(obj: T.untyped, errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#194
module KubeDSL::Validations::InstanceMethods
  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#220
  sig { returns(T.untyped) }
  def valid?; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#195
  sig { params(errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(errors = T.unsafe(nil), nesting = T.unsafe(nil)); end

  # source://kube-dsl//lib/kube-dsl/validations.rb#210
  sig { returns(T.untyped) }
  def validate!; end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#131
class KubeDSL::Validations::KeyValueValidator
  sig { returns(T.untyped) }
  attr_reader :field_name

  sig { returns(T.untyped) }
  attr_reader :format_validator

  # @return [KeyValueValidator] a new instance of KeyValueValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#134
  sig { params(field_name: T.untyped, options: T.untyped).void }
  def initialize(field_name, options = T.unsafe(nil)); end

  # source://kube-dsl//lib/kube-dsl/validations.rb#139
  sig { params(obj: T.untyped, errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#116
class KubeDSL::Validations::ObjectValidator
  sig { returns(T.untyped) }
  attr_reader :field_name

  sig { returns(T.untyped) }
  attr_reader :kind_of

  # @return [ObjectValidator] a new instance of ObjectValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#119
  sig { params(field_name: T.untyped, opts: T.untyped).void }
  def initialize(field_name, opts); end

  # source://kube-dsl//lib/kube-dsl/validations.rb#124
  sig { params(obj: T.untyped, errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#24
class KubeDSL::Validations::PresenceValidator
  sig { returns(T.untyped) }
  attr_reader :field_name

  sig { returns(T.untyped) }
  attr_reader :presence

  # @return [PresenceValidator] a new instance of PresenceValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#27
  sig { params(field_name: T.untyped, presence: T.untyped).void }
  def initialize(field_name, presence); end

  # source://kube-dsl//lib/kube-dsl/validations.rb#32
  sig { params(obj: T.untyped, errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(obj, errors, nesting); end

  private

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#40
  sig { params(obj: T.untyped).returns(T.untyped) }
  def obj_empty?(obj); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#7
class KubeDSL::Validations::ValidationErrors
  sig { returns(T.untyped) }
  attr_reader :messages

  # @return [ValidationErrors] a new instance of ValidationErrors
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#10
  sig { void }
  def initialize; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#14
  sig { params(field_name: T.untyped, msg: T.untyped).returns(T.untyped) }
  def add(field_name, msg); end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#19
  sig { returns(T.untyped) }
  def empty?; end
end

# source://kube-dsl//lib/kube-dsl/value_fields.rb#6
module KubeDSL::ValueFields
  class << self
    # @private
    #
    # source://kube-dsl//lib/kube-dsl/value_fields.rb#165
    sig { params(base: T.untyped).returns(T.untyped) }
    def extended(base); end
  end
end

# source://kube-dsl//lib/kube-dsl/value_fields.rb#9
module KubeDSL::ValueFields::ClassMethods
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#110
  sig { returns(T.untyped) }
  def __fields__; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#66
  sig { params(field: T.untyped, accessor: T.untyped, field_block: T.untyped).returns(T.untyped) }
  def array_field(field, accessor = T.unsafe(nil), &field_block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#49
  sig { params(field: T.untyped, format: T.untyped).returns(T.untyped) }
  def key_value_field(field, format:); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#28
  sig { params(field: T.untyped, allow_empty: T.untyped, field_block: T.untyped).returns(T.untyped) }
  def object_field(field, allow_empty: T.unsafe(nil), &field_block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#14
  sig { params(field: T.untyped, default: T.untyped).returns(T.untyped) }
  def value_field(field, default: T.unsafe(nil)); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#10
  sig { params(fields: T.untyped).returns(T.untyped) }
  def value_fields(*fields); end
end

# source://kube-dsl//lib/kube-dsl/value_fields.rb#121
module KubeDSL::ValueFields::InstanceMethods
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#156
  sig { params(other: T.untyped, fields: T.untyped).returns(T.untyped) }
  def merge(other, fields); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#122
  sig { params(other: T.untyped, fields: T.untyped).returns(T.untyped) }
  def merge!(other, fields: T.unsafe(nil)); end
end

class ValidationError < StandardError; end
